// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2
import (
	"github.com/mattn/anko/ast"
)

//line parser.go.y:38
type yySymType struct {
	yys                 int
	compstmt            []ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default []ast.Stmt
	stmts               []ast.Stmt
	stmt                ast.Stmt
	exprs               []ast.Expr
	expr                ast.Expr
	map_expr            map[ast.Expr]ast.Expr
	expr_idents         []string
	expr_type           string
	tok                 ast.Token
	array_count         ast.ArrayCount
	expr_slice          ast.Expr
	expr_ident          ast.Expr
	expr_op             ast.Expr
	expr_unary          ast.Expr
	expr_binary         ast.Expr
	op_binary           ast.Operator
	op_comparison       ast.Operator
	op_add              ast.Operator
	op_multiply         ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const CASE = 57388
const DEFAULT = 57389
const GO = 57390
const CHAN = 57391
const MAKE = 57392
const OPCHAN = 57393
const TYPE = 57394
const LEN = 57395
const DELETE = 57396
const UNARY = 57397

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"GO",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'['",
	"']'",
	"','",
	"'.'",
	"'!'",
	"'\\n'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:865

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	55, 62,
	73, 5,
	76, 62,
	-2, 1,
	-1, 21,
	76, 63,
	-2, 23,
	-1, 25,
	55, 62,
	-2, 51,
	-1, 59,
	55, 62,
	76, 62,
	-2, 5,
	-1, 109,
	16, 52,
	76, 52,
	-2, 103,
	-1, 131,
	1, 109,
	8, 109,
	46, 109,
	47, 109,
	55, 109,
	56, 109,
	69, 109,
	70, 109,
	72, 109,
	73, 109,
	75, 109,
	76, 109,
	79, 109,
	-2, 66,
	-1, 133,
	1, 111,
	8, 111,
	46, 111,
	47, 111,
	55, 111,
	56, 111,
	69, 111,
	70, 111,
	72, 111,
	73, 111,
	75, 111,
	76, 111,
	79, 111,
	-2, 66,
	-1, 230,
	75, 156,
	-2, 148,
	-1, 233,
	70, 156,
	-2, 148,
	-1, 250,
	1, 65,
	8, 65,
	46, 65,
	47, 65,
	55, 65,
	56, 65,
	70, 65,
	72, 65,
	73, 65,
	75, 65,
	76, 65,
	79, 65,
	-2, 66,
	-1, 251,
	1, 110,
	8, 110,
	46, 110,
	47, 110,
	55, 110,
	56, 110,
	69, 110,
	70, 110,
	72, 110,
	73, 110,
	75, 110,
	76, 110,
	79, 110,
	-2, 74,
	-1, 252,
	1, 112,
	8, 112,
	46, 112,
	47, 112,
	55, 112,
	56, 112,
	69, 112,
	70, 112,
	72, 112,
	73, 112,
	75, 112,
	76, 112,
	79, 112,
	-2, 74,
	-1, 258,
	1, 20,
	46, 20,
	47, 20,
	70, 20,
	73, 20,
	79, 20,
	-2, 83,
	-1, 260,
	1, 22,
	46, 22,
	47, 22,
	70, 22,
	73, 22,
	79, 22,
	-2, 85,
	-1, 283,
	70, 154,
	75, 154,
	-2, 149,
	-1, 300,
	1, 19,
	46, 19,
	47, 19,
	70, 19,
	73, 19,
	79, 19,
	-2, 82,
	-1, 301,
	1, 21,
	46, 21,
	47, 21,
	70, 21,
	73, 21,
	79, 21,
	-2, 84,
}

const yyPrivate = 57344

const yyLast = 2775

var yyAct = [...]int{

	63, 272, 273, 21, 231, 27, 7, 1, 275, 274,
	193, 8, 6, 61, 5, 64, 233, 106, 60, 8,
	8, 69, 116, 127, 200, 104, 108, 110, 230, 293,
	295, 8, 46, 294, 239, 290, 329, 117, 111, 291,
	239, 8, 76, 122, 240, 179, 62, 115, 115, 239,
	128, 129, 130, 132, 134, 282, 127, 114, 131, 133,
	21, 259, 75, 124, 292, 71, 178, 61, 74, 284,
	245, 142, 143, 145, 146, 139, 180, 149, 150, 151,
	152, 153, 154, 155, 156, 257, 315, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	170, 171, 172, 173, 174, 194, 126, 77, 148, 301,
	300, 288, 183, 176, 236, 280, 265, 189, 177, 281,
	192, 356, 61, 179, 199, 260, 179, 127, 186, 127,
	185, 84, 85, 103, 100, 101, 77, 118, 206, 140,
	115, 123, 76, 113, 205, 213, 207, 187, 360, 258,
	202, 191, 228, 127, 215, 97, 98, 99, 102, 201,
	84, 85, 75, 195, 121, 71, 197, 120, 74, 119,
	359, 76, 352, 209, 210, 242, 298, 351, 237, 219,
	349, 221, 127, 217, 61, 226, 345, 344, 198, 222,
	355, 75, 115, 234, 71, 115, 340, 74, 330, 326,
	232, 232, 220, 249, 229, 223, 241, 243, 250, 137,
	112, 324, 261, 321, 333, 264, 227, 286, 216, 270,
	179, 266, 127, 255, 253, 276, 218, 208, 322, 314,
	313, 279, 136, 248, 67, 308, 287, 9, 354, 61,
	350, 299, 256, 283, 275, 274, 283, 66, 296, 289,
	268, 10, 252, 202, 77, 251, 285, 244, 194, 125,
	147, 65, 297, 4, 2, 138, 54, 59, 58, 55,
	304, 56, 57, 307, 306, 303, 309, 107, 84, 85,
	103, 100, 101, 48, 115, 47, 316, 312, 44, 76,
	61, 38, 317, 196, 305, 318, 319, 135, 94, 95,
	96, 188, 97, 98, 99, 102, 271, 323, 310, 75,
	19, 17, 71, 16, 23, 74, 327, 22, 3, 0,
	0, 331, 332, 0, 0, 0, 0, 0, 0, 0,
	339, 0, 0, 341, 0, 347, 342, 343, 348, 0,
	0, 346, 0, 0, 0, 0, 0, 0, 0, 77,
	88, 89, 93, 91, 87, 86, 0, 0, 0, 0,
	73, 0, 0, 357, 358, 78, 79, 80, 81, 82,
	83, 0, 0, 84, 85, 103, 100, 101, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	72, 90, 92, 94, 95, 96, 0, 97, 98, 99,
	102, 0, 0, 0, 75, 336, 0, 71, 0, 337,
	74, 77, 88, 89, 93, 91, 87, 86, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 78, 79, 80,
	81, 82, 83, 0, 0, 84, 85, 103, 100, 101,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 72, 90, 92, 94, 95, 96, 0, 97,
	98, 99, 102, 0, 0, 0, 75, 246, 0, 71,
	0, 247, 74, 77, 88, 89, 93, 91, 87, 86,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 78,
	79, 80, 81, 82, 83, 0, 0, 84, 85, 103,
	100, 101, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 224, 72, 90, 92, 94, 95, 96,
	0, 97, 98, 99, 102, 0, 0, 0, 75, 0,
	0, 71, 225, 0, 74, 77, 88, 89, 93, 91,
	87, 86, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 78, 79, 80, 81, 82, 83, 0, 0, 84,
	85, 103, 100, 101, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 211, 72, 90, 92, 94,
	95, 96, 0, 97, 98, 99, 102, 0, 0, 0,
	75, 0, 0, 71, 212, 0, 74, 77, 88, 89,
	93, 91, 87, 86, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 0,
	0, 84, 85, 103, 100, 101, 0, 0, 0, 0,
	0, 0, 76, 0, 0, 0, 70, 0, 72, 90,
	92, 94, 95, 96, 0, 97, 98, 99, 102, 0,
	181, 0, 75, 0, 0, 71, 0, 0, 74, 77,
	88, 89, 93, 91, 87, 86, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 78, 79, 80, 81, 82,
	83, 0, 0, 84, 85, 103, 100, 101, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	72, 90, 92, 94, 95, 96, 0, 97, 98, 99,
	102, 0, 0, 0, 75, 353, 0, 71, 0, 0,
	74, 77, 88, 89, 93, 91, 87, 86, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 78, 79, 80,
	81, 82, 83, 0, 0, 84, 85, 103, 100, 101,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 72, 90, 92, 94, 95, 96, 0, 97,
	98, 99, 102, 0, 0, 0, 75, 338, 0, 71,
	0, 0, 74, 77, 88, 89, 93, 91, 87, 86,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 78,
	79, 80, 81, 82, 83, 0, 0, 84, 85, 103,
	100, 101, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 72, 90, 92, 94, 95, 96,
	0, 97, 98, 99, 102, 0, 0, 0, 75, 335,
	0, 71, 0, 0, 74, 77, 88, 89, 93, 91,
	87, 86, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 78, 79, 80, 81, 82, 83, 0, 0, 84,
	85, 103, 100, 101, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 334, 72, 90, 92, 94,
	95, 96, 0, 97, 98, 99, 102, 0, 0, 0,
	75, 0, 0, 71, 0, 0, 74, 77, 88, 89,
	93, 91, 87, 86, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 0,
	0, 84, 85, 103, 100, 101, 0, 0, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 328, 72, 90,
	92, 94, 95, 96, 0, 97, 98, 99, 102, 0,
	0, 0, 75, 0, 0, 71, 0, 0, 74, 77,
	88, 89, 93, 91, 87, 86, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 78, 79, 80, 81, 82,
	83, 0, 0, 84, 85, 103, 100, 101, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	72, 90, 92, 94, 95, 96, 0, 97, 98, 99,
	102, 0, 325, 0, 75, 0, 0, 71, 0, 0,
	74, 77, 88, 89, 93, 91, 87, 86, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 78, 79, 80,
	81, 82, 83, 0, 0, 84, 85, 103, 100, 101,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 72, 90, 92, 94, 95, 96, 0, 97,
	98, 99, 102, 0, 0, 0, 75, 320, 0, 71,
	0, 0, 74, 77, 88, 89, 93, 91, 87, 86,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 78,
	79, 80, 81, 82, 83, 0, 0, 84, 85, 103,
	100, 101, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 72, 90, 92, 94, 95, 96,
	0, 97, 98, 99, 102, 0, 0, 0, 75, 0,
	0, 71, 311, 0, 74, 77, 88, 89, 93, 91,
	87, 86, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 78, 79, 80, 81, 82, 83, 0, 0, 84,
	85, 103, 100, 101, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 72, 90, 92, 94,
	95, 96, 0, 97, 98, 99, 102, 0, 0, 0,
	75, 0, 0, 71, 302, 0, 74, 77, 88, 89,
	93, 91, 87, 86, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 0,
	0, 84, 85, 103, 100, 101, 0, 0, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 72, 90,
	92, 94, 95, 96, 0, 97, 98, 99, 102, 0,
	0, 0, 75, 0, 0, 71, 278, 0, 74, 77,
	88, 89, 93, 91, 87, 86, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 78, 79, 80, 81, 82,
	83, 0, 0, 84, 85, 103, 100, 101, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	72, 90, 92, 94, 95, 96, 0, 97, 98, 99,
	102, 0, 0, 0, 75, 0, 269, 71, 0, 0,
	74, 77, 88, 89, 93, 91, 87, 86, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 78, 79, 80,
	81, 82, 83, 0, 0, 84, 85, 103, 100, 101,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 72, 90, 92, 94, 95, 96, 0, 97,
	98, 99, 102, 0, 267, 0, 75, 0, 0, 71,
	0, 0, 74, 77, 88, 89, 93, 91, 87, 86,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 78,
	79, 80, 81, 82, 83, 0, 0, 84, 85, 103,
	100, 101, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 72, 90, 92, 94, 95, 96,
	0, 97, 98, 99, 102, 0, 0, 0, 75, 0,
	0, 71, 263, 0, 74, 77, 88, 89, 93, 91,
	87, 86, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 78, 79, 80, 81, 82, 83, 0, 0, 84,
	85, 103, 100, 101, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 72, 90, 92, 94,
	95, 96, 0, 97, 98, 99, 102, 0, 254, 0,
	75, 0, 0, 71, 0, 0, 74, 77, 88, 89,
	93, 91, 87, 86, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 0,
	0, 84, 85, 103, 100, 101, 0, 0, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 72, 90,
	92, 94, 95, 96, 0, 97, 98, 99, 102, 0,
	0, 0, 75, 238, 0, 71, 0, 0, 74, 77,
	88, 89, 93, 91, 87, 86, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 78, 79, 80, 81, 82,
	83, 0, 0, 84, 85, 103, 100, 101, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 235,
	72, 90, 92, 94, 95, 96, 0, 97, 98, 99,
	102, 0, 0, 0, 75, 0, 0, 71, 0, 0,
	74, 77, 88, 89, 93, 91, 87, 86, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 78, 79, 80,
	81, 82, 83, 0, 0, 84, 85, 103, 100, 101,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 214, 72, 90, 92, 94, 95, 96, 0, 97,
	98, 99, 102, 0, 0, 0, 75, 0, 0, 71,
	0, 0, 74, 77, 88, 89, 93, 91, 87, 86,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 78,
	79, 80, 81, 82, 83, 0, 0, 84, 85, 103,
	100, 101, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 72, 90, 92, 94, 95, 96,
	0, 97, 98, 99, 102, 0, 0, 0, 75, 190,
	0, 71, 0, 0, 74, 77, 88, 89, 93, 91,
	87, 86, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 78, 79, 80, 81, 82, 83, 0, 0, 84,
	85, 103, 100, 101, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 72, 90, 92, 94,
	95, 96, 0, 97, 98, 99, 102, 0, 182, 0,
	75, 0, 0, 71, 0, 0, 74, 77, 88, 89,
	93, 91, 87, 86, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 0,
	0, 84, 85, 103, 100, 101, 0, 0, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 72, 90,
	92, 94, 95, 96, 0, 97, 98, 99, 102, 0,
	175, 0, 75, 0, 0, 71, 0, 0, 74, 77,
	88, 89, 93, 91, 87, 86, 0, 0, 0, 0,
	73, 0, 0, 0, 0, 78, 79, 80, 81, 82,
	83, 0, 0, 84, 85, 103, 100, 101, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 70, 0,
	72, 90, 92, 94, 95, 96, 0, 97, 98, 99,
	102, 0, 0, 0, 75, 0, 0, 71, 0, 0,
	74, 77, 88, 89, 93, 91, 87, 86, 0, 0,
	0, 0, 73, 0, 0, 0, 0, 78, 79, 80,
	81, 82, 83, 0, 0, 84, 85, 103, 100, 101,
	0, 0, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 72, 90, 92, 94, 95, 96, 0, 97,
	98, 99, 102, 0, 0, 0, 75, 0, 0, 71,
	0, 0, 74, 77, 88, 89, 93, 91, 87, 86,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 78,
	79, 80, 81, 82, 83, 0, 0, 84, 85, 103,
	100, 101, 0, 0, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 0, 72, 90, 92, 94, 95, 96,
	0, 97, 98, 99, 102, 0, 0, 0, 75, 0,
	0, 71, 0, 0, 204, 77, 88, 89, 93, 91,
	87, 86, 0, 0, 0, 0, 73, 0, 0, 0,
	0, 78, 79, 80, 81, 82, 83, 0, 0, 84,
	85, 103, 100, 101, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 72, 90, 92, 94,
	95, 96, 0, 97, 98, 99, 102, 0, 0, 0,
	75, 0, 0, 71, 0, 0, 203, 77, 88, 89,
	93, 91, 87, 86, 0, 0, 0, 0, 73, 0,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 0,
	0, 84, 85, 103, 100, 101, 0, 0, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 0, 72, 90,
	92, 94, 95, 96, 0, 97, 98, 99, 102, 0,
	0, 0, 141, 0, 0, 71, 0, 0, 74, 37,
	28, 29, 0, 0, 33, 13, 45, 14, 24, 0,
	25, 0, 0, 0, 0, 0, 0, 0, 40, 30,
	31, 32, 0, 15, 18, 0, 0, 0, 0, 0,
	0, 0, 0, 11, 12, 0, 0, 0, 0, 0,
	26, 0, 0, 20, 0, 41, 42, 0, 39, 43,
	0, 0, 0, 0, 0, 0, 49, 0, 51, 53,
	0, 0, 52, 0, 35, 0, 36, 0, 0, 34,
	0, 0, 0, 50, 77, 88, 89, 93, 91, 87,
	86, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 85,
	103, 100, 101, 0, 0, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 0, 72, 90, 92, 94, 95,
	96, 0, 97, 98, 99, 102, 0, 0, 0, 75,
	0, 0, 71, 0, 0, 74, 77, 88, 89, 93,
	91, 0, 86, 0, 0, 0, 37, 28, 29, 0,
	0, 33, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 103, 100, 101, 40, 30, 31, 32, 0,
	0, 76, 0, 0, 0, 0, 0, 0, 90, 92,
	94, 95, 96, 0, 97, 98, 99, 102, 0, 0,
	0, 75, 41, 42, 71, 39, 43, 74, 77, 88,
	89, 93, 91, 49, 0, 51, 53, 0, 0, 52,
	0, 35, 0, 36, 0, 0, 34, 277, 0, 0,
	50, 0, 84, 85, 103, 100, 101, 0, 0, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	90, 92, 94, 95, 96, 0, 97, 98, 99, 102,
	37, 28, 29, 75, 0, 33, 71, 0, 0, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 40,
	30, 31, 32, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 37, 28, 29, 0, 0, 33, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 42, 0, 39,
	43, 40, 30, 31, 32, 0, 0, 49, 0, 51,
	53, 0, 0, 52, 0, 35, 0, 36, 0, 0,
	34, 262, 0, 0, 50, 0, 0, 0, 41, 42,
	0, 39, 43, 0, 184, 0, 0, 0, 0, 49,
	0, 51, 53, 0, 0, 52, 0, 35, 0, 36,
	0, 0, 34, 37, 28, 29, 50, 0, 33, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 40, 30, 31, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 28, 29,
	0, 0, 33, 0, 45, 0, 0, 0, 0, 41,
	42, 0, 39, 43, 0, 144, 40, 30, 31, 32,
	49, 0, 51, 53, 0, 0, 52, 0, 35, 0,
	36, 0, 0, 34, 0, 0, 0, 50, 0, 0,
	0, 0, 0, 41, 42, 0, 39, 43, 0, 0,
	0, 0, 0, 0, 49, 0, 51, 53, 0, 0,
	52, 0, 105, 0, 36, 0, 0, 34, 37, 28,
	29, 50, 0, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 40, 30, 31,
	32, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 28, 29, 0, 0, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 42, 0, 39, 43, 40,
	30, 31, 32, 0, 0, 49, 0, 51, 53, 0,
	0, 52, 0, 35, 0, 36, 0, 0, 34, 0,
	0, 0, 50, 0, 0, 0, 41, 42, 0, 39,
	43, 0, 0, 0, 0, 0, 0, 49, 0, 51,
	53, 0, 0, 52, 0, 35, 0, 36, 0, 0,
	34, 0, 0, 0, 50,
}
var yyPact = [...]int{

	-59, -1000, 2205, -59, -1000, -68, -68, -1000, -1000, -1000,
	-1000, -1000, -1000, 2664, 2664, 257, 233, -1000, 165, -1000,
	2696, 1883, -1000, -1000, 2664, 2593, 2664, -36, -1000, -1000,
	-1000, -1000, -1000, 139, -68, -68, 2664, 66, -1000, 98,
	96, 93, 2664, 70, -1000, 255, 51, -1000, -1000, 2664,
	2664, 2664, 2664, 2664, -1000, -1000, -1000, -1000, -1000, 2205,
	-68, -1000, -53, 1945, 1945, 163, 196, -59, 68, 2131,
	2664, 2559, 2664, 2664, 256, 2664, 2664, 2664, 2664, 2664,
	2664, 2664, 2664, 2664, -1000, -1000, 2664, 2664, 2664, 2664,
	2664, 2664, 2664, 2664, 2664, 2664, 2664, 2664, 2664, 2664,
	2664, 2664, 2664, 2664, 1821, -59, 50, 3, 581, 66,
	1759, 2488, 255, 57, 2664, -68, 2664, 1697, 2664, 2664,
	254, 114, 1945, 2664, -31, -1000, 2664, -68, -9, -9,
	-9, -36, 2069, -36, 2007, -1000, -59, 2664, -59, 157,
	2664, 2664, 1945, 519, 2664, 1635, 2268, -1000, 146, 1945,
	120, 1945, 1945, 1945, 1945, 1945, 1945, 2392, 2330, 238,
	238, 238, 238, 238, 238, 91, 91, 91, 120, 120,
	120, 120, 120, 120, 120, -59, 156, -68, 2664, -68,
	2664, -59, -68, 457, 2664, 144, 255, -48, -60, 1573,
	-1000, 106, 1511, -28, -1000, 254, 101, 253, -5, 395,
	2664, -53, 2664, 251, 248, 154, 1449, 153, 212, 77,
	53, 2456, -1000, 1387, 2664, 44, -1000, 151, -1000, 1325,
	246, 1263, 149, 198, 2352, -1000, 1201, 162, 43, 47,
	-68, -6, -68, -68, 147, 2664, 39, -1000, -1000, 245,
	-1000, -37, -11, -43, -46, -1000, -1000, 2664, -53, 1945,
	-36, -1000, -1000, -1000, -59, -1000, 172, 38, -1000, 37,
	-1000, 1139, -1000, -1000, 2268, -1000, -1000, -59, -1000, 2664,
	-1000, -38, -1000, -1000, 179, 2664, 1077, -1000, -1000, -59,
	161, 160, 14, -68, -1000, 2664, -1000, 1945, -1000, -1000,
	-1000, 2664, -1000, -1000, 2664, 2664, 1015, 143, 159, -59,
	-1000, -1000, -1000, 141, 953, 129, -1000, -1000, -59, 891,
	-20, -1000, 128, -59, -59, 145, 829, 767, 333, 705,
	-1000, -1000, -59, 126, -1000, -59, -1000, -1000, -59, -59,
	-1000, 117, 116, -59, 2664, -1000, -1000, 2664, -1000, 110,
	209, 107, -1000, -1000, -1000, -1000, 102, 1945, 643, 207,
	121, -1000, -1000, -1000, 52, -59, -59, 100, 78, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 7, 318, 237, 251, 317, 314, 313, 311, 310,
	306, 2, 1, 32, 0, 301, 17, 10, 293, 291,
	5, 288, 285, 283, 272, 271, 269, 266, 264, 263,
	22, 4, 12, 6,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 5, 6, 6, 7,
	7, 7, 8, 8, 8, 8, 9, 10, 10, 10,
	10, 10, 11, 11, 12, 18, 18, 18, 15, 15,
	15, 16, 16, 16, 17, 17, 19, 19, 19, 19,
	19, 19, 13, 13, 13, 13, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 20, 21, 21, 22, 22, 22, 22,
	22, 22, 22, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 24, 24, 25, 25, 25,
	25, 25, 25, 26, 26, 26, 27, 27, 27, 27,
	27, 27, 27, 28, 28, 29, 29, 29, 30, 30,
	32, 32, 33, 31, 31, 31, 31,
}
var yyR2 = [...]int{

	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 1, 13, 12, 9, 8, 1, 6,
	5, 6, 5, 1, 1, 1, 4, 3, 3, 5,
	7, 5, 4, 7, 9, 5, 7, 0, 1, 1,
	2, 2, 4, 4, 3, 0, 2, 3, 0, 3,
	6, 0, 1, 4, 1, 3, 6, 5, 5, 6,
	5, 5, 0, 1, 4, 4, 1, 1, 1, 1,
	1, 1, 5, 3, 3, 7, 8, 8, 9, 5,
	5, 3, 5, 4, 5, 4, 4, 4, 1, 4,
	4, 5, 7, 5, 7, 9, 7, 3, 2, 4,
	6, 3, 1, 1, 1, 1, 2, 2, 2, 2,
	4, 2, 4, 3, 3, 3, 3, 3, 3, 2,
	2, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 2, 1, 1, 0, 1,
	1, 2, 1, 0, 2, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -28, -2, -29, 73, -32, -33, 79, -3,
	-4, 38, 39, 10, 12, 28, -7, -8, 29, -9,
	48, -14, -5, -6, 13, 15, 45, -20, 5, 6,
	24, 25, 26, 9, 74, 69, 71, 4, -19, 53,
	23, 50, 51, 54, -21, 11, -13, -22, -23, 61,
	78, 63, 67, 64, -27, -26, -25, -24, -28, -29,
	-32, -33, -13, -14, -14, 4, 14, 69, 4, -14,
	55, 74, 57, 27, 77, 71, 51, 16, 32, 33,
	34, 35, 36, 37, 40, 41, 22, 21, 17, 18,
	58, 20, 59, 19, 60, 61, 62, 64, 65, 66,
	43, 44, 67, 42, -14, 69, -16, -4, -14, 4,
	-14, 74, 71, 4, -30, -32, -30, -14, 71, 71,
	71, 71, -14, 71, -16, 4, 55, 76, -14, -14,
	-14, -20, -14, -20, -14, -3, 69, 13, 69, -1,
	71, 71, -14, -14, 56, -14, -14, 4, -13, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, 69, -1, -32, 16, 76,
	73, 69, 69, -14, 56, -16, 71, -13, -15, -14,
	72, -13, -14, -17, 4, 49, -18, 52, 74, -14,
	55, -13, -30, 77, 77, -1, -14, -1, 70, -13,
	-13, 56, 75, -14, 56, 8, 72, -1, 70, -14,
	-30, -14, -1, -30, 56, 75, -14, 72, 8, -16,
	76, -31, -32, 76, -31, 56, 8, 72, 72, 77,
	72, -17, 74, -17, 4, 75, 72, 76, -13, -14,
	-20, 4, 4, 70, 69, 70, 30, 8, 72, 8,
	72, -14, 75, 75, -14, 72, 70, 69, 4, 73,
	70, -10, -12, -11, 47, 46, -14, 75, 75, 69,
	72, 72, 8, -32, 75, -30, 70, -14, 72, 4,
	72, 76, 75, 72, 76, 76, -14, -1, 4, 69,
	72, 72, 75, -1, -14, -30, -11, -12, 56, -14,
	-13, 75, -1, 69, 69, 72, -14, -14, -14, -14,
	72, 70, 69, -1, 70, 69, 70, -1, 56, 56,
	70, -1, -1, 69, 56, 72, 72, 76, 72, -1,
	70, -1, -1, -1, 70, 70, -1, -14, -14, 70,
	31, 70, 70, 72, 31, 69, 69, -1, -1, 70,
	70,
}
var yyDef = [...]int{

	143, -2, -2, 143, 144, 147, 146, 150, 152, 3,
	6, 7, 8, 62, 0, 0, 12, 13, 0, 18,
	0, -2, 24, 25, 0, -2, 0, 66, 67, 68,
	69, 70, 71, 0, 148, 148, 0, 103, 88, 0,
	0, 0, 0, 0, 102, 51, 0, 104, 105, 0,
	0, 0, 0, 0, 121, 122, 123, 124, 2, -2,
	145, 151, 9, 63, 10, 0, 0, 143, 103, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 0, 0, 63, -2,
	0, 0, 51, 0, 62, 149, 48, 0, 62, 0,
	0, 45, 98, 0, 0, 52, 62, 148, 106, 107,
	108, -2, 0, -2, 0, 4, 143, 0, 143, 0,
	62, 62, 27, 0, 0, 0, 73, 74, 0, 97,
	101, 113, 114, 115, 116, 117, 118, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 141, 142, 143, 0, 146, 0, 148,
	0, 143, 148, 0, 0, 0, 51, 153, 153, 0,
	81, 0, 0, 0, 54, 0, 0, 0, 0, 0,
	62, 28, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 85, 0, 32, 0,
	0, 0, 0, 37, 0, 86, 0, 0, 0, 0,
	-2, 0, 155, -2, 0, 0, 0, 83, 89, 0,
	90, 0, 0, 0, 0, 46, 99, 0, 26, 64,
	-2, -2, -2, 11, 143, 31, 0, 0, -2, 0,
	-2, 0, 60, 61, 72, 84, 29, 143, 53, 0,
	35, 148, 38, 39, 0, 62, 0, 57, 58, 143,
	0, 0, 0, -2, 79, 0, 80, 49, 82, 55,
	91, 0, 47, 93, 0, 0, 0, 0, 0, 143,
	-2, -2, 59, 0, 0, 0, 40, 41, 143, 63,
	0, 56, 0, 143, 143, 0, 0, 0, 0, 0,
	100, 30, 143, 0, 33, 143, 36, 44, 143, 143,
	75, 0, 0, 143, 0, 92, 94, 0, 96, 0,
	17, 0, 42, 43, 76, 77, 0, 50, 0, 16,
	0, 34, 78, 95, 0, 143, 143, 0, 0, 15,
	14,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	79, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 66, 67, 3,
	71, 72, 64, 60, 76, 61, 77, 65, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 56, 73,
	58, 55, 59, 57, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 74, 3, 75, 63, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 69, 62, 70,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 68,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:92
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:96
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:102
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = []ast.Stmt{yyDollar[2].stmt}
			} else {
				yyVAL.stmts = []ast.Stmt{}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmts = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:113
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[3].stmt)
				if l, ok := yylex.(*Lexer); ok {
					l.stmts = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:124
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:128
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:132
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:137
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:142
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:147
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:152
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:157
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:161
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:165
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:170
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:175
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:180
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:185
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 19:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:189
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:199
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:204
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:209
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:216
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:220
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:226
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:233
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, Operator: "=", RHSS: []ast.Expr{yyDollar[3].expr}}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:238
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, Operator: "=", RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, Operator: "=", RHSS: yyDollar[3].exprs}
			}
		}
	case 29:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:252
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:257
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:261
		{
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:271
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmts: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:276
		{
			yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmts: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 34:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:281
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmts: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:286
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:293
		{
			yyVAL.stmt_switch = &ast.SwitchStmt{Expr: yyDollar[2].expr, Body: yyDollar[5].stmt_switch_cases}
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:300
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:304
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:308
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:312
		{
			body := yyVAL.stmt_switch_cases.(*ast.SwitchBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_switch_case)
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:317
		{
			body := yyVAL.stmt_switch_cases.(*ast.SwitchBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_switch_default
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:327
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:332
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:344
		{
			yyVAL.array_count = ast.ArrayCount{Count: 0}
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:348
		{
			yyVAL.array_count = ast.ArrayCount{Count: 1}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:352
		{
			yyVAL.array_count.Count = yyVAL.array_count.Count + 1
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:357
		{
			yyVAL.map_expr = make(map[ast.Expr]ast.Expr)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:361
		{
			mapExpr := make(map[ast.Expr]ast.Expr)
			mapExpr[yyDollar[1].expr] = yyDollar[3].expr
			yyVAL.map_expr = mapExpr
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:367
		{
			if len(yyDollar[1].map_expr) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyDollar[1].map_expr[yyDollar[4].expr] = yyDollar[6].expr
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:375
		{
			yyVAL.expr_idents = []string{}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:379
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:383
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:392
		{
			yyVAL.expr_type = yyDollar[1].tok.Lit
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:396
		{
			yyVAL.expr_type = yyVAL.expr_type + "." + yyDollar[3].tok.Lit
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:402
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:406
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 58:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:410
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:414
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:418
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:422
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:428
		{
			yyVAL.exprs = nil
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:432
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:436
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:443
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:452
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:456
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:461
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:466
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:471
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:476
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:481
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:486
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:491
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 75:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:496
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmts: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 76:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:501
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmts: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 77:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:506
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmts: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 78:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:511
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmts: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:516
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:521
		{
			yyVAL.expr = &ast.MapExpr{MapExpr: yyDollar[3].map_expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:526
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:531
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:536
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:541
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:546
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:551
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:556
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:561
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:566
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:571
		{
			yyVAL.expr = &ast.NewExpr{Type: yyDollar[3].expr_type}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:576
		{
			yyVAL.expr = &ast.MakeChanExpr{Type: yyDollar[4].expr_type, SizeExpr: nil}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:581
		{
			yyVAL.expr = &ast.MakeChanExpr{Type: yyDollar[4].expr_type, SizeExpr: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:586
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:591
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type, LenExpr: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:596
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type, LenExpr: yyDollar[6].expr, CapExpr: yyDollar[8].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:601
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:606
		{
			yyVAL.expr = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:611
		{
			yyVAL.expr = &ast.ChanExpr{RHS: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:616
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:621
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:626
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:634
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:645
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:650
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:655
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:660
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:665
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:670
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:675
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:682
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "+=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:687
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "-=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:692
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "*=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:697
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "/=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:702
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "&=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:707
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "|=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:712
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:717
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:722
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:727
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:732
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:737
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:744
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:749
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:756
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:761
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:766
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:771
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:776
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:781
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:788
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:793
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:798
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:805
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:810
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:815
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:820
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:825
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:830
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:835
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "**", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
