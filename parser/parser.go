// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2
import (
	"github.com/mattn/anko/ast"
)

//line parser.go.y:37
type yySymType struct {
	yys                 int
	compstmt            []ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default []ast.Stmt
	stmts               []ast.Stmt
	stmt                ast.Stmt
	exprs               []ast.Expr
	expr                ast.Expr
	map_expr            map[ast.Expr]ast.Expr
	expr_idents         []string
	expr_type           string
	tok                 ast.Token
	array_count         ast.ArrayCount
	expr_slice          ast.Expr
	expr_ident          ast.Expr
	expr_op             ast.Expr
	expr_unary          ast.Expr
	expr_binary         ast.Expr
	op_binary           ast.Operator
	op_comparison       ast.Operator
	op_add              ast.Operator
	op_multiply         ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const CASE = 57388
const DEFAULT = 57389
const GO = 57390
const CHAN = 57391
const MAKE = 57392
const OPCHAN = 57393
const TYPE = 57394
const LEN = 57395
const DELETE = 57396
const UNARY = 57397

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"GO",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"'='",
	"'?'",
	"':'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"'{'",
	"'}'",
	"';'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'^'",
	"'&'",
	"'|'",
	"'\\n'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:859

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	55, 61,
	58, 61,
	69, 5,
	-2, 1,
	-1, 17,
	55, 61,
	-2, 50,
	-1, 21,
	58, 62,
	-2, 26,
	-1, 58,
	55, 61,
	58, 61,
	-2, 5,
	-1, 70,
	16, 51,
	58, 51,
	-2, 110,
	-1, 130,
	1, 116,
	8, 116,
	46, 116,
	47, 116,
	55, 116,
	57, 116,
	58, 116,
	67, 116,
	68, 116,
	69, 116,
	71, 116,
	73, 116,
	79, 116,
	-2, 65,
	-1, 132,
	1, 118,
	8, 118,
	46, 118,
	47, 118,
	55, 118,
	57, 118,
	58, 118,
	67, 118,
	68, 118,
	69, 118,
	71, 118,
	73, 118,
	79, 118,
	-2, 65,
	-1, 164,
	17, 0,
	18, 0,
	-2, 126,
	-1, 165,
	17, 0,
	18, 0,
	-2, 127,
	-1, 229,
	73, 155,
	-2, 147,
	-1, 232,
	68, 155,
	-2, 147,
	-1, 249,
	1, 64,
	8, 64,
	46, 64,
	47, 64,
	55, 64,
	57, 64,
	58, 64,
	68, 64,
	69, 64,
	71, 64,
	73, 64,
	79, 64,
	-2, 65,
	-1, 250,
	1, 117,
	8, 117,
	46, 117,
	47, 117,
	55, 117,
	57, 117,
	58, 117,
	67, 117,
	68, 117,
	69, 117,
	71, 117,
	73, 117,
	79, 117,
	-2, 73,
	-1, 251,
	1, 119,
	8, 119,
	46, 119,
	47, 119,
	55, 119,
	57, 119,
	58, 119,
	67, 119,
	68, 119,
	69, 119,
	71, 119,
	73, 119,
	79, 119,
	-2, 73,
	-1, 261,
	1, 23,
	46, 23,
	47, 23,
	68, 23,
	69, 23,
	79, 23,
	-2, 90,
	-1, 263,
	1, 25,
	46, 25,
	47, 25,
	68, 25,
	69, 25,
	79, 25,
	-2, 92,
	-1, 282,
	68, 153,
	73, 153,
	-2, 148,
	-1, 301,
	1, 22,
	46, 22,
	47, 22,
	68, 22,
	69, 22,
	79, 22,
	-2, 89,
	-1, 302,
	1, 24,
	46, 24,
	47, 24,
	68, 24,
	69, 24,
	79, 24,
	-2, 91,
}

const yyPrivate = 57344

const yyLast = 2926

var yyAct = [...]int{

	62, 271, 272, 21, 26, 7, 230, 5, 192, 8,
	67, 232, 60, 115, 229, 63, 239, 8, 69, 238,
	194, 73, 291, 196, 293, 108, 109, 274, 273, 110,
	45, 283, 8, 244, 314, 8, 116, 292, 302, 301,
	238, 193, 121, 197, 61, 1, 287, 113, 290, 127,
	128, 129, 131, 133, 279, 123, 130, 132, 268, 21,
	8, 289, 112, 281, 238, 60, 185, 145, 117, 122,
	120, 262, 119, 118, 142, 147, 148, 150, 151, 260,
	153, 154, 155, 156, 157, 158, 235, 359, 227, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 241,
	358, 182, 138, 141, 351, 219, 188, 144, 159, 191,
	60, 126, 184, 198, 6, 349, 280, 348, 111, 126,
	59, 136, 344, 343, 263, 340, 126, 205, 141, 355,
	201, 208, 261, 210, 186, 60, 126, 329, 190, 236,
	217, 226, 325, 321, 320, 209, 200, 299, 114, 114,
	285, 269, 258, 254, 252, 126, 212, 207, 354, 79,
	80, 81, 82, 83, 84, 332, 213, 214, 220, 107,
	323, 204, 313, 206, 225, 137, 312, 278, 88, 211,
	135, 139, 71, 9, 233, 222, 228, 328, 126, 140,
	294, 307, 248, 240, 242, 199, 249, 87, 141, 75,
	125, 78, 353, 126, 106, 100, 264, 274, 273, 267,
	300, 350, 259, 65, 275, 288, 221, 10, 256, 251,
	247, 250, 243, 193, 124, 286, 152, 60, 64, 56,
	4, 141, 55, 201, 58, 68, 284, 295, 54, 2,
	53, 114, 134, 57, 47, 46, 43, 37, 298, 195,
	187, 270, 19, 16, 23, 22, 114, 3, 0, 0,
	0, 0, 306, 305, 0, 308, 0, 79, 80, 81,
	82, 83, 84, 0, 304, 315, 0, 107, 60, 0,
	0, 316, 0, 0, 317, 318, 88, 0, 0, 296,
	0, 297, 0, 0, 0, 309, 114, 0, 101, 102,
	103, 231, 231, 0, 0, 87, 0, 75, 0, 78,
	0, 0, 106, 100, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 346, 0, 0, 347, 0, 0,
	0, 0, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 0, 0, 326, 282, 0, 0, 282, 330, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 338, 339,
	0, 0, 0, 341, 342, 0, 0, 0, 345, 0,
	0, 0, 0, 0, 0, 0, 89, 92, 93, 97,
	95, 90, 91, 0, 0, 114, 0, 77, 0, 0,
	356, 357, 79, 80, 81, 82, 83, 84, 0, 0,
	85, 86, 107, 104, 105, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 76, 0, 336, 96,
	94, 98, 99, 101, 102, 103, 0, 0, 0, 0,
	87, 335, 75, 0, 78, 0, 0, 106, 100, 89,
	92, 93, 97, 95, 90, 91, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 79, 80, 81, 82, 83,
	84, 0, 0, 85, 86, 107, 104, 105, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 76,
	0, 246, 96, 94, 98, 99, 101, 102, 103, 0,
	0, 0, 0, 87, 245, 75, 0, 78, 0, 0,
	106, 100, 89, 92, 93, 97, 95, 90, 91, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 79, 80,
	81, 82, 83, 84, 0, 0, 85, 86, 107, 104,
	105, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 76, 223, 0, 96, 94, 98, 99, 101,
	102, 103, 0, 0, 0, 0, 87, 0, 75, 224,
	78, 0, 0, 106, 100, 89, 92, 93, 97, 95,
	90, 91, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 79, 80, 81, 82, 83, 84, 0, 0, 85,
	86, 107, 104, 105, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 76, 215, 0, 96, 94,
	98, 99, 101, 102, 103, 0, 0, 0, 0, 87,
	0, 75, 216, 78, 0, 0, 106, 100, 89, 92,
	93, 97, 95, 90, 91, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 79, 80, 81, 82, 83, 84,
	0, 0, 85, 86, 107, 104, 105, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 74, 76, 0,
	0, 96, 94, 98, 99, 101, 102, 103, 0, 143,
	0, 0, 87, 0, 75, 0, 78, 0, 0, 106,
	100, 89, 92, 93, 97, 95, 90, 91, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 79, 80, 81,
	82, 83, 84, 0, 0, 85, 86, 107, 104, 105,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 76, 0, 0, 96, 94, 98, 99, 101, 102,
	103, 0, 0, 0, 0, 87, 352, 75, 0, 78,
	0, 0, 106, 100, 89, 92, 93, 97, 95, 90,
	91, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	79, 80, 81, 82, 83, 84, 0, 0, 85, 86,
	107, 104, 105, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 76, 0, 0, 96, 94, 98,
	99, 101, 102, 103, 0, 0, 0, 0, 87, 337,
	75, 0, 78, 0, 0, 106, 100, 89, 92, 93,
	97, 95, 90, 91, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 79, 80, 81, 82, 83, 84, 0,
	0, 85, 86, 107, 104, 105, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 76, 0, 0,
	96, 94, 98, 99, 101, 102, 103, 0, 0, 0,
	0, 87, 334, 75, 0, 78, 0, 0, 106, 100,
	89, 92, 93, 97, 95, 90, 91, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 79, 80, 81, 82,
	83, 84, 0, 0, 85, 86, 107, 104, 105, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	76, 333, 0, 96, 94, 98, 99, 101, 102, 103,
	0, 0, 0, 0, 87, 0, 75, 0, 78, 0,
	0, 106, 100, 89, 92, 93, 97, 95, 90, 91,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 79,
	80, 81, 82, 83, 84, 0, 0, 85, 86, 107,
	104, 105, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 76, 327, 0, 96, 94, 98, 99,
	101, 102, 103, 0, 0, 0, 0, 87, 0, 75,
	0, 78, 0, 0, 106, 100, 89, 92, 93, 97,
	95, 90, 91, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 79, 80, 81, 82, 83, 84, 0, 0,
	85, 86, 107, 104, 105, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 76, 0, 0, 96,
	94, 98, 99, 101, 102, 103, 0, 322, 0, 0,
	87, 0, 75, 0, 78, 0, 0, 106, 100, 89,
	92, 93, 97, 95, 90, 91, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 79, 80, 81, 82, 83,
	84, 0, 0, 85, 86, 107, 104, 105, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 76,
	0, 0, 96, 94, 98, 99, 101, 102, 103, 0,
	0, 0, 0, 87, 319, 75, 0, 78, 0, 0,
	106, 100, 89, 92, 93, 97, 95, 90, 91, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 79, 80,
	81, 82, 83, 84, 0, 0, 85, 86, 107, 104,
	105, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 76, 0, 0, 96, 94, 98, 99, 101,
	102, 103, 0, 0, 0, 0, 87, 0, 75, 310,
	78, 0, 0, 106, 100, 89, 92, 93, 97, 95,
	90, 91, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 79, 80, 81, 82, 83, 84, 0, 0, 85,
	86, 107, 104, 105, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 76, 0, 0, 96, 94,
	98, 99, 101, 102, 103, 0, 0, 0, 0, 87,
	0, 75, 303, 78, 0, 0, 106, 100, 89, 92,
	93, 97, 95, 90, 91, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 79, 80, 81, 82, 83, 84,
	0, 0, 85, 86, 107, 104, 105, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 76, 0,
	0, 96, 94, 98, 99, 101, 102, 103, 0, 0,
	0, 0, 87, 0, 75, 277, 78, 0, 0, 106,
	100, 89, 92, 93, 97, 95, 90, 91, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 79, 80, 81,
	82, 83, 84, 0, 0, 85, 86, 107, 104, 105,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 76, 0, 0, 96, 94, 98, 99, 101, 102,
	103, 0, 0, 0, 0, 87, 0, 75, 266, 78,
	0, 0, 106, 100, 89, 92, 93, 97, 95, 90,
	91, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	79, 80, 81, 82, 83, 84, 0, 0, 85, 86,
	107, 104, 105, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 76, 0, 0, 96, 94, 98,
	99, 101, 102, 103, 0, 0, 0, 257, 87, 0,
	75, 0, 78, 0, 0, 106, 100, 89, 92, 93,
	97, 95, 90, 91, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 79, 80, 81, 82, 83, 84, 0,
	0, 85, 86, 107, 104, 105, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 76, 0, 0,
	96, 94, 98, 99, 101, 102, 103, 0, 255, 0,
	0, 87, 0, 75, 0, 78, 0, 0, 106, 100,
	89, 92, 93, 97, 95, 90, 91, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 79, 80, 81, 82,
	83, 84, 0, 0, 85, 86, 107, 104, 105, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	76, 0, 0, 96, 94, 98, 99, 101, 102, 103,
	0, 253, 0, 0, 87, 0, 75, 0, 78, 0,
	0, 106, 100, 89, 92, 93, 97, 95, 90, 91,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 79,
	80, 81, 82, 83, 84, 0, 0, 85, 86, 107,
	104, 105, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 76, 0, 0, 96, 94, 98, 99,
	101, 102, 103, 0, 0, 0, 0, 87, 237, 75,
	0, 78, 0, 0, 106, 100, 89, 92, 93, 97,
	95, 90, 91, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 79, 80, 81, 82, 83, 84, 0, 0,
	85, 86, 107, 104, 105, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 76, 234, 0, 96,
	94, 98, 99, 101, 102, 103, 0, 0, 0, 0,
	87, 0, 75, 0, 78, 0, 0, 106, 100, 89,
	92, 93, 97, 95, 90, 91, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 79, 80, 81, 82, 83,
	84, 0, 0, 85, 86, 107, 104, 105, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 76,
	218, 0, 96, 94, 98, 99, 101, 102, 103, 0,
	0, 0, 0, 87, 0, 75, 0, 78, 0, 0,
	106, 100, 89, 92, 93, 97, 95, 90, 91, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 79, 80,
	81, 82, 83, 84, 0, 0, 85, 86, 107, 104,
	105, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 76, 0, 0, 96, 94, 98, 99, 101,
	102, 103, 0, 0, 0, 0, 87, 189, 75, 0,
	78, 0, 0, 106, 100, 89, 92, 93, 97, 95,
	90, 91, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 79, 80, 81, 82, 83, 84, 0, 0, 85,
	86, 107, 104, 105, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 76, 0, 0, 96, 94,
	98, 99, 101, 102, 103, 0, 181, 0, 0, 87,
	0, 75, 0, 78, 0, 0, 106, 100, 89, 92,
	93, 97, 95, 90, 91, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 79, 80, 81, 82, 83, 84,
	0, 0, 85, 86, 107, 104, 105, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 76, 0,
	0, 96, 94, 98, 99, 101, 102, 103, 0, 180,
	0, 0, 87, 0, 75, 0, 78, 0, 0, 106,
	100, 89, 92, 93, 97, 95, 90, 91, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 79, 80, 81,
	82, 83, 84, 0, 0, 85, 86, 107, 104, 105,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	74, 76, 0, 0, 96, 94, 98, 99, 101, 102,
	103, 0, 0, 0, 0, 87, 0, 75, 0, 78,
	0, 0, 106, 100, 89, 92, 93, 97, 95, 90,
	91, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	79, 80, 81, 82, 83, 84, 0, 0, 85, 86,
	107, 104, 105, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 76, 0, 0, 96, 94, 98,
	99, 101, 102, 103, 0, 0, 0, 0, 87, 0,
	75, 0, 78, 0, 0, 106, 100, 89, 92, 93,
	97, 95, 90, 91, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 79, 80, 81, 82, 83, 84, 0,
	0, 85, 86, 107, 104, 105, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 76, 0, 0,
	96, 94, 98, 99, 101, 102, 103, 0, 0, 0,
	0, 87, 0, 75, 0, 203, 0, 0, 106, 100,
	89, 92, 93, 97, 95, 90, 91, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 79, 80, 81, 82,
	83, 84, 0, 0, 85, 86, 107, 104, 105, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	76, 0, 0, 96, 94, 98, 99, 101, 102, 103,
	0, 0, 0, 0, 87, 0, 75, 0, 202, 0,
	0, 106, 100, 89, 92, 93, 97, 95, 90, 91,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 79,
	80, 81, 82, 83, 84, 0, 0, 85, 86, 107,
	104, 105, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 76, 0, 0, 96, 94, 98, 99,
	101, 102, 103, 0, 0, 0, 0, 146, 0, 75,
	0, 78, 0, 0, 106, 100, 89, 92, 93, 97,
	95, 90, 91, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 79, 80, 81, 82, 83, 84, 0, 0,
	85, 86, 107, 104, 105, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 96,
	94, 98, 99, 101, 102, 103, 0, 0, 0, 0,
	87, 0, 75, 0, 78, 0, 0, 106, 100, 89,
	92, 93, 97, 95, 0, 91, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 80, 81, 82, 83,
	84, 0, 0, 85, 86, 107, 104, 105, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 96, 94, 98, 99, 101, 102, 103, 0,
	0, 0, 0, 87, 0, 75, 0, 78, 0, 0,
	106, 100, 36, 27, 28, 0, 0, 32, 13, 44,
	14, 24, 0, 17, 0, 0, 0, 0, 0, 0,
	0, 39, 29, 30, 31, 0, 15, 18, 0, 0,
	0, 0, 0, 0, 0, 0, 11, 12, 0, 0,
	0, 0, 0, 25, 0, 0, 20, 0, 40, 41,
	0, 38, 42, 0, 0, 0, 0, 0, 0, 0,
	48, 52, 0, 0, 0, 34, 0, 0, 35, 0,
	33, 0, 0, 49, 50, 51, 89, 92, 93, 97,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 80, 81, 82, 83, 84, 0, 0,
	85, 86, 107, 104, 105, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 96,
	94, 98, 99, 101, 102, 103, 97, 95, 0, 0,
	87, 0, 75, 0, 78, 0, 0, 106, 100, 79,
	80, 81, 82, 83, 84, 0, 0, 85, 86, 107,
	104, 105, 0, 0, 36, 27, 28, 0, 88, 32,
	0, 0, 0, 0, 0, 0, 96, 94, 98, 99,
	101, 102, 103, 39, 29, 30, 31, 87, 0, 75,
	0, 78, 0, 0, 106, 100, 36, 27, 28, 0,
	0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 41, 0, 38, 42, 39, 29, 30, 31, 0,
	0, 0, 48, 52, 0, 0, 0, 34, 0, 0,
	35, 0, 33, 276, 0, 49, 50, 51, 0, 0,
	0, 0, 40, 41, 0, 38, 42, 0, 0, 0,
	0, 0, 0, 0, 48, 52, 0, 0, 0, 34,
	0, 0, 35, 0, 33, 265, 0, 49, 50, 51,
	79, 80, 81, 82, 83, 84, 0, 0, 85, 86,
	107, 0, 0, 0, 0, 36, 27, 28, 0, 88,
	32, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 101, 102, 103, 39, 29, 30, 31, 87, 0,
	75, 0, 78, 0, 0, 106, 100, 0, 0, 0,
	36, 27, 28, 0, 0, 32, 0, 0, 0, 0,
	0, 40, 41, 0, 38, 42, 0, 0, 183, 39,
	29, 30, 31, 48, 52, 0, 0, 0, 34, 0,
	0, 35, 0, 33, 0, 0, 49, 50, 51, 0,
	0, 0, 0, 0, 0, 0, 40, 41, 0, 38,
	42, 0, 0, 149, 0, 70, 27, 28, 48, 52,
	32, 0, 44, 34, 0, 0, 35, 0, 33, 0,
	0, 49, 50, 51, 39, 29, 30, 31, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 36, 27, 28,
	0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 41, 0, 38, 42, 39, 29, 30, 31,
	0, 0, 0, 48, 52, 0, 0, 0, 66, 0,
	0, 35, 0, 33, 0, 0, 49, 50, 51, 0,
	0, 0, 0, 40, 41, 0, 38, 42, 0, 0,
	0, 0, 72, 27, 28, 48, 52, 32, 0, 0,
	34, 0, 0, 35, 0, 33, 0, 0, 49, 50,
	51, 39, 29, 30, 31, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 40, 41,
	0, 38, 42, 0, 0, 0, 0, 0, 0, 0,
	48, 52, 0, 0, 0, 34, 0, 0, 35, 0,
	33, 0, 0, 49, 50, 51,
}
var yyPact = [...]int{

	-62, -1000, 2398, -62, -1000, -70, -70, -1000, -1000, -1000,
	-1000, -1000, -1000, 2793, 2793, 234, 209, 2761, 125, -1000,
	2848, 1945, -1000, -1000, 2793, 2793, -43, -1000, -1000, -1000,
	-1000, -1000, 58, -70, -70, 2793, -2, -1000, 3, 2,
	0, 2793, -1, -1000, 230, 155, -1000, -1000, 2793, 2793,
	2793, 2793, 2793, -1000, -1000, -1000, -1000, -1000, 2398, -70,
	-1000, 88, 2008, 2008, 123, 118, -62, 183, 5, 622,
	-2, -62, -3, 2197, 2793, 2706, 2793, 2793, 232, 2793,
	2793, 2793, 2793, 2793, 2793, -1000, -1000, 2793, 2793, 2793,
	2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793,
	2793, 2793, 2793, 2793, 2793, 2793, 2793, 2793, 1882, 1819,
	2671, 230, -4, 2793, -70, 2793, 1756, 2793, 2793, 229,
	-29, 2008, 2793, 150, -1000, 2793, -70, 137, 137, 137,
	-43, 2134, -43, 2071, -1000, -62, 2793, -62, 99, -70,
	2793, -70, 2793, -62, 98, 2793, 2793, 2008, 559, 2793,
	1693, 2260, -1000, 2008, 2008, 2008, 2008, 2008, 2008, 107,
	2008, 2460, 2323, 2460, 2507, 2507, 2628, 2628, 2628, 2628,
	245, 245, 2008, 137, 137, 137, 2628, 2628, 2008, 2008,
	-62, -70, 496, 2793, 80, 230, -44, -47, 1630, -1000,
	78, 1567, -55, -1000, 229, 37, 228, -40, 433, 2793,
	88, 2793, 227, 225, 96, 1504, 95, -1000, 1441, 224,
	1378, 94, 192, 71, 63, 2582, -1000, 1315, 2793, -13,
	-1000, 93, 171, 2550, -1000, 1252, 120, -17, 55, -70,
	-42, -70, -70, 92, 2793, -25, -1000, -1000, 221, -1000,
	-10, -51, -34, 142, -1000, -1000, 2793, 88, 2008, -43,
	-1000, -1000, -1000, -62, -1000, -62, -1000, 2793, -1000, 153,
	-32, -1000, -33, -1000, 1189, -1000, -1000, 2008, -1000, -1000,
	-19, -1000, -1000, 144, 2793, 1126, -1000, -1000, -62, 119,
	115, -37, -70, -1000, 2793, -1000, 2008, -1000, -1000, -1000,
	2793, -1000, -1000, 2793, 2793, 1063, 86, 85, 1000, 113,
	-62, -1000, -1000, -1000, 84, -1000, -1000, -62, 937, 140,
	-1000, 79, -62, -62, 108, 874, 811, 370, 748, -1000,
	-1000, -1000, -62, -62, 67, -1000, -1000, -62, -62, -1000,
	65, 64, -62, 2793, -1000, -1000, 2793, -1000, 59, 57,
	190, -1000, -1000, -1000, -1000, 46, 2008, 685, -1000, 181,
	101, -1000, -1000, 72, -62, -62, 42, 19, -1000, -1000,
}
var yyPgo = [...]int{

	0, 45, 267, 193, 227, 265, 264, 263, 262, 261,
	2, 1, 30, 0, 260, 10, 8, 259, 257, 4,
	256, 255, 254, 250, 248, 242, 239, 249, 240, 13,
	6, 124, 5,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 5,
	6, 6, 7, 7, 7, 8, 9, 9, 9, 9,
	9, 10, 10, 11, 17, 17, 17, 14, 14, 14,
	15, 15, 15, 16, 16, 18, 18, 18, 18, 18,
	18, 12, 12, 12, 12, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	19, 20, 20, 21, 21, 21, 21, 21, 21, 21,
	22, 22, 22, 22, 23, 23, 24, 24, 24, 24,
	24, 24, 25, 25, 25, 26, 26, 26, 26, 26,
	26, 26, 27, 27, 28, 28, 28, 29, 29, 31,
	31, 32, 30, 30, 30, 30,
}
var yyR2 = [...]int{

	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 4, 7, 9, 5, 13, 12, 9,
	8, 1, 6, 5, 6, 5, 1, 1, 1, 4,
	3, 3, 5, 7, 5, 7, 0, 1, 1, 2,
	2, 4, 4, 3, 0, 2, 3, 0, 3, 6,
	0, 1, 4, 1, 3, 6, 5, 5, 6, 5,
	5, 0, 1, 4, 4, 1, 1, 1, 1, 1,
	1, 5, 3, 3, 7, 8, 8, 9, 5, 5,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 5,
	4, 5, 4, 4, 4, 1, 4, 4, 5, 7,
	5, 7, 9, 7, 3, 2, 4, 6, 3, 1,
	1, 1, 1, 2, 2, 2, 2, 4, 2, 4,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 2, 1, 1, 0, 1, 1,
	2, 1, 0, 2, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -27, -2, -28, 69, -31, -32, 79, -3,
	-4, 38, 39, 10, 12, 28, -7, 15, 29, -8,
	48, -13, -5, -6, 13, 45, -19, 5, 6, 24,
	25, 26, 9, 72, 67, 70, 4, -18, 53, 23,
	50, 51, 54, -20, 11, -12, -21, -22, 62, 75,
	76, 77, 63, -23, -24, -25, -26, -27, -28, -31,
	-32, -12, -13, -13, 4, 14, 67, -15, -4, -13,
	4, 67, 4, -13, 55, 72, 56, 27, 74, 32,
	33, 34, 35, 36, 37, 40, 41, 70, 51, 16,
	21, 22, 17, 18, 60, 20, 59, 19, 61, 62,
	78, 63, 64, 65, 43, 44, 77, 42, -13, -13,
	72, 70, 4, -29, -31, -29, -13, 70, 70, 70,
	70, -13, 70, -15, 4, 55, 58, -13, -13, -13,
	-19, -13, -19, -13, -3, 67, 13, 67, -1, -31,
	16, 58, 69, 67, -1, 70, 70, -13, -13, 57,
	-13, -13, 4, -13, -13, -13, -13, -13, -13, -12,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
	67, 67, -13, 57, -15, 70, -12, -14, -13, 71,
	-12, -13, -16, 4, 49, -17, 52, 72, -13, 55,
	-12, -29, 74, 74, -1, -13, -1, 68, -13, -29,
	-13, -1, 68, -12, -12, 57, 73, -13, 57, 8,
	71, -1, -29, 57, 73, -13, 71, 8, -15, 58,
	-30, -31, 58, -30, 57, 8, 71, 71, 74, 71,
	-16, 72, -16, 4, 73, 71, 58, -12, -13, -19,
	4, 4, 68, 67, 68, 67, 4, 69, 68, 30,
	8, 71, 8, 71, -13, 73, 73, -13, 71, 68,
	-9, -11, -10, 47, 46, -13, 73, 73, 67, 71,
	71, 8, -31, 73, -29, 68, -13, 71, 4, 71,
	58, 73, 71, 58, 58, -13, -1, -1, -13, 4,
	67, 71, 71, 73, -29, -10, -11, 57, -13, -12,
	73, -1, 67, 67, 71, -13, -13, -13, -13, 71,
	68, 68, 67, 67, -1, 68, -1, 57, 57, 68,
	-1, -1, 67, 57, 71, 71, 58, 71, -1, -1,
	68, -1, -1, 68, 68, -1, -13, -13, 68, 68,
	31, 68, 71, 31, 67, 67, -1, -1, 68, 68,
}
var yyDef = [...]int{

	142, -2, -2, 142, 143, 146, 145, 149, 151, 3,
	6, 7, 8, 61, 0, 0, 12, -2, 0, 21,
	0, -2, 27, 28, 0, 0, 65, 66, 67, 68,
	69, 70, 0, 147, 147, 0, 110, 95, 0, 0,
	0, 0, 0, 109, 50, 0, 111, 112, 0, 0,
	0, 0, 0, 120, 121, 122, 123, 2, -2, 144,
	150, 9, 62, 10, 0, 0, 142, 0, 0, 62,
	-2, 142, 110, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 88, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 0, 61, 148, 47, 0, 61, 0, 0,
	44, 105, 0, 0, 51, 61, 147, 113, 114, 115,
	-2, 0, -2, 0, 4, 142, 0, 142, 0, 145,
	0, 147, 0, 142, 0, 61, 61, 30, 0, 0,
	0, 72, 73, 81, 82, 83, 84, 85, 86, 0,
	104, 108, 124, 125, -2, -2, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 147, 0, 0, 0, 50, 152, 152, 0, 80,
	0, 0, 0, 53, 0, 0, 0, 0, 0, 61,
	31, 0, 0, 0, 0, 0, 0, 13, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 0, 0, 0,
	92, 0, 36, 0, 93, 0, 0, 0, 0, -2,
	0, 154, -2, 0, 0, 0, 90, 96, 0, 97,
	0, 0, 0, 0, 45, 106, 0, 29, 63, -2,
	-2, -2, 11, 142, 34, 142, 52, 0, 16, 0,
	0, -2, 0, -2, 0, 59, 60, 71, 91, 32,
	147, 37, 38, 0, 61, 0, 56, 57, 142, 0,
	0, 0, -2, 78, 0, 79, 48, 89, 54, 98,
	0, 46, 100, 0, 0, 0, 0, 0, 0, 0,
	142, -2, -2, 58, 0, 39, 40, 142, 62, 0,
	55, 0, 142, 142, 0, 0, 0, 0, 0, 107,
	33, 14, 142, 142, 0, 35, 43, 142, 142, 74,
	0, 0, 142, 0, 99, 101, 0, 103, 0, 0,
	20, 41, 42, 75, 76, 0, 49, 0, 15, 19,
	0, 77, 102, 0, 142, 142, 0, 0, 18, 17,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	79, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 75, 3, 3, 3, 65, 77, 3,
	70, 71, 63, 61, 58, 62, 74, 64, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 57, 69,
	60, 55, 59, 56, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 72, 3, 73, 76, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 67, 78, 68,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 66,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:87
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:91
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:97
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = []ast.Stmt{yyDollar[2].stmt}
			} else {
				yyVAL.stmts = []ast.Stmt{}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmts = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:108
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[3].stmt)
				if l, ok := yylex.(*Lexer); ok {
					l.stmts = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:119
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:123
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:127
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:132
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:137
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:142
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:147
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:152
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 13:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:157
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyDollar[3].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 14:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:162
		{
			yyVAL.stmt = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmts: yyDollar[6].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:167
		{
			yyVAL.stmt = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmts: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:172
		{
			yyVAL.stmt = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:177
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 19:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:211
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:216
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:221
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:228
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:232
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:238
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, Operator: "=", RHSS: []ast.Expr{yyDollar[3].expr}}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:249
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, Operator: "=", RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, Operator: "=", RHSS: yyDollar[3].exprs}
			}
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:263
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:268
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:273
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:285
		{
			yyVAL.stmt_switch = &ast.SwitchStmt{Expr: yyDollar[2].expr, Body: yyDollar[5].stmt_switch_cases}
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 36:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:292
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{}
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:296
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:300
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:304
		{
			body := yyVAL.stmt_switch_cases.(*ast.SwitchBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_switch_case)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:309
		{
			body := yyVAL.stmt_switch_cases.(*ast.SwitchBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_switch_default
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:320
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:325
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:332
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:337
		{
			yyVAL.array_count = ast.ArrayCount{Count: 0}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:341
		{
			yyVAL.array_count = ast.ArrayCount{Count: 1}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:345
		{
			yyVAL.array_count.Count = yyVAL.array_count.Count + 1
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:350
		{
			yyVAL.map_expr = make(map[ast.Expr]ast.Expr)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:354
		{
			mapExpr := make(map[ast.Expr]ast.Expr)
			mapExpr[yyDollar[1].expr] = yyDollar[3].expr
			yyVAL.map_expr = mapExpr
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:360
		{
			if len(yyDollar[1].map_expr) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyDollar[1].map_expr[yyDollar[4].expr] = yyDollar[6].expr
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:368
		{
			yyVAL.expr_idents = []string{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:372
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:376
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:385
		{
			yyVAL.expr_type = yyDollar[1].tok.Lit
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:389
		{
			yyVAL.expr_type = yyVAL.expr_type + "." + yyDollar[3].tok.Lit
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:395
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:399
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:403
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:407
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:411
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:415
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:421
		{
			yyVAL.exprs = nil
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:425
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:429
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:436
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:445
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:449
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:454
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:459
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:464
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:469
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:474
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:479
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:484
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:489
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmts: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 75:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:494
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmts: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 76:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:499
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmts: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 77:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:504
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmts: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:509
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:514
		{
			yyVAL.expr = &ast.MapExpr{MapExpr: yyDollar[3].map_expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:519
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:524
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "+=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:529
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "-=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:534
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "*=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:539
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "/=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:544
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "&=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:549
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "|=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:559
		{
			yyVAL.expr = &ast.AssocExpr{LHS: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:564
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:569
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:574
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:579
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:584
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:589
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:594
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:599
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:604
		{
			yyVAL.expr = &ast.NewExpr{Type: yyDollar[3].expr_type}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:609
		{
			yyVAL.expr = &ast.MakeChanExpr{Type: yyDollar[4].expr_type, SizeExpr: nil}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:614
		{
			yyVAL.expr = &ast.MakeChanExpr{Type: yyDollar[4].expr_type, SizeExpr: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:619
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 101:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:624
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type, LenExpr: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 102:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:629
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type, LenExpr: yyDollar[6].expr, CapExpr: yyDollar[8].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:634
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:639
		{
			yyVAL.expr = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:644
		{
			yyVAL.expr = &ast.ChanExpr{RHS: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:649
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:654
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:659
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:667
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:678
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:683
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:688
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:693
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:698
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:703
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:708
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:715
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:720
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:725
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:730
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:738
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:743
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:750
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:755
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:760
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:765
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:770
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:775
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:782
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:787
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:792
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:799
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:804
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:809
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:814
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:819
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:824
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:829
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "**", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
