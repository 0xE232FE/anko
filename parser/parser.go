// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/mattn/anko/ast"
)

//line parser.go.y:41
type yySymType struct {
	yys int
	tok ast.Token

	compstmt            ast.Stmt
	stmts               ast.Stmt
	stmt                ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default ast.Stmt

	exprs         []ast.Expr
	expr          ast.Expr
	expr_idents   []string
	type_data     *ast.TypeStruct
	slice_count   int
	expr_ident    ast.Expr
	expr_literals ast.Expr
	expr_map      *ast.MapExpr
	expr_slice    ast.Expr
	expr_unary    ast.Expr
	expr_binary   ast.Expr
	expr_lets     ast.Expr

	op_binary     ast.Operator
	op_comparison ast.Operator
	op_add        ast.Operator
	op_multiply   ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const CASE = 57388
const DEFAULT = 57389
const GO = 57390
const CHAN = 57391
const MAKE = 57392
const OPCHAN = 57393
const TYPE = 57394
const LEN = 57395
const DELETE = 57396
const CLOSE = 57397
const MAP = 57398
const UNARY = 57399

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"GO",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"','",
	"';'",
	"'.'",
	"'['",
	"']'",
	"'!'",
	"'\\n'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1001

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	57, 55,
	75, 55,
	76, 5,
	-2, 1,
	-1, 23,
	75, 56,
	-2, 26,
	-1, 27,
	16, 90,
	-2, 55,
	-1, 61,
	57, 55,
	75, 55,
	-2, 5,
	-1, 114,
	16, 91,
	75, 91,
	-2, 101,
	-1, 136,
	1, 120,
	8, 120,
	46, 120,
	47, 120,
	57, 120,
	58, 120,
	71, 120,
	72, 120,
	74, 120,
	75, 120,
	76, 120,
	79, 120,
	81, 120,
	-2, 59,
	-1, 138,
	1, 122,
	8, 122,
	46, 122,
	47, 122,
	57, 122,
	58, 122,
	71, 122,
	72, 122,
	74, 122,
	75, 122,
	76, 122,
	79, 122,
	81, 122,
	-2, 59,
	-1, 248,
	79, 167,
	-2, 159,
	-1, 265,
	72, 167,
	-2, 159,
	-1, 269,
	1, 58,
	8, 58,
	46, 58,
	47, 58,
	57, 58,
	58, 58,
	72, 58,
	74, 58,
	75, 58,
	76, 58,
	79, 58,
	81, 58,
	-2, 59,
	-1, 270,
	1, 121,
	8, 121,
	46, 121,
	47, 121,
	57, 121,
	58, 121,
	71, 121,
	72, 121,
	74, 121,
	75, 121,
	76, 121,
	79, 121,
	81, 121,
	-2, 63,
	-1, 271,
	1, 123,
	8, 123,
	46, 123,
	47, 123,
	57, 123,
	58, 123,
	71, 123,
	72, 123,
	74, 123,
	75, 123,
	76, 123,
	79, 123,
	81, 123,
	-2, 63,
	-1, 275,
	1, 17,
	46, 17,
	47, 17,
	72, 17,
	76, 17,
	81, 17,
	-2, 71,
	-1, 277,
	1, 19,
	46, 19,
	47, 19,
	72, 19,
	76, 19,
	81, 19,
	-2, 73,
	-1, 309,
	72, 165,
	79, 165,
	-2, 160,
	-1, 322,
	1, 16,
	46, 16,
	47, 16,
	72, 16,
	76, 16,
	81, 16,
	-2, 70,
	-1, 323,
	1, 18,
	46, 18,
	47, 18,
	72, 18,
	76, 18,
	81, 18,
	-2, 72,
}

const yyPrivate = 57344

const yyLast = 3506

var yyAct = [...]int{

	65, 200, 7, 23, 203, 298, 299, 249, 8, 63,
	127, 29, 110, 301, 300, 66, 5, 81, 70, 265,
	248, 8, 310, 190, 116, 8, 8, 108, 111, 115,
	45, 255, 260, 347, 121, 261, 262, 80, 255, 126,
	206, 82, 83, 119, 64, 308, 258, 133, 8, 255,
	1, 211, 80, 134, 135, 137, 139, 128, 254, 78,
	131, 255, 23, 77, 79, 63, 136, 138, 276, 186,
	201, 274, 145, 146, 78, 149, 150, 151, 77, 79,
	154, 156, 157, 316, 201, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 170, 171, 172,
	173, 174, 175, 176, 177, 178, 179, 180, 181, 153,
	251, 307, 186, 189, 6, 205, 246, 192, 208, 142,
	62, 185, 204, 63, 199, 346, 323, 207, 210, 205,
	194, 130, 202, 322, 277, 131, 204, 275, 131, 311,
	366, 306, 213, 226, 206, 282, 202, 120, 223, 131,
	196, 118, 195, 198, 120, 398, 230, 131, 206, 122,
	183, 212, 143, 125, 124, 123, 72, 71, 397, 391,
	390, 388, 384, 383, 218, 219, 252, 131, 379, 378,
	186, 377, 245, 186, 376, 367, 233, 63, 363, 237,
	359, 240, 216, 357, 244, 356, 355, 234, 354, 224,
	328, 320, 241, 317, 256, 257, 289, 259, 247, 227,
	131, 286, 280, 272, 268, 232, 217, 264, 9, 147,
	117, 394, 278, 393, 184, 269, 281, 370, 352, 345,
	283, 344, 305, 231, 141, 68, 339, 273, 235, 293,
	295, 392, 267, 389, 302, 10, 120, 301, 300, 73,
	312, 288, 271, 63, 270, 263, 129, 152, 67, 213,
	313, 56, 4, 315, 57, 314, 61, 319, 321, 58,
	2, 59, 43, 113, 60, 42, 318, 148, 41, 40,
	140, 209, 30, 297, 22, 21, 20, 290, 25, 24,
	3, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	0, 120, 340, 338, 337, 0, 120, 0, 336, 81,
	0, 250, 63, 0, 0, 0, 0, 350, 0, 351,
	0, 0, 0, 0, 250, 0, 0, 0, 0, 0,
	325, 0, 341, 82, 83, 96, 93, 94, 327, 0,
	0, 0, 329, 330, 80, 332, 0, 0, 0, 371,
	372, 184, 0, 0, 0, 0, 343, 0, 0, 90,
	91, 92, 95, 309, 0, 0, 78, 0, 0, 0,
	77, 79, 353, 0, 0, 387, 0, 0, 0, 0,
	309, 0, 358, 0, 360, 361, 0, 0, 0, 0,
	364, 0, 0, 0, 0, 368, 369, 0, 0, 0,
	0, 0, 0, 375, 0, 0, 0, 184, 0, 184,
	0, 0, 120, 380, 0, 0, 381, 382, 0, 0,
	0, 385, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 100, 101, 105, 103,
	107, 106, 0, 0, 395, 396, 76, 0, 0, 184,
	0, 84, 85, 87, 88, 89, 86, 0, 0, 82,
	83, 96, 93, 94, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 243, 75, 102,
	104, 97, 98, 99, 0, 90, 91, 92, 95, 0,
	0, 0, 78, 0, 0, 0, 77, 79, 242, 81,
	100, 101, 105, 103, 107, 106, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 84, 85, 87, 88, 89,
	86, 0, 0, 82, 83, 96, 93, 94, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 229, 75, 102, 104, 97, 98, 99, 0, 90,
	91, 92, 95, 0, 0, 0, 78, 0, 0, 0,
	77, 79, 228, 81, 100, 101, 105, 103, 107, 106,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 84,
	85, 87, 88, 89, 86, 0, 0, 82, 83, 96,
	93, 94, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 75, 102, 104, 97,
	98, 99, 0, 90, 91, 92, 95, 0, 0, 0,
	78, 348, 349, 0, 77, 79, 81, 100, 101, 105,
	103, 107, 106, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 84, 85, 87, 88, 89, 86, 0, 0,
	82, 83, 96, 93, 94, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 75,
	102, 104, 97, 98, 99, 0, 90, 91, 92, 95,
	0, 0, 0, 78, 0, 0, 0, 77, 79, 342,
	81, 100, 101, 105, 103, 107, 106, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 84, 85, 87, 88,
	89, 86, 0, 0, 82, 83, 96, 93, 94, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 75, 102, 104, 97, 98, 99, 0,
	90, 91, 92, 95, 0, 0, 0, 78, 0, 0,
	0, 77, 79, 326, 81, 100, 101, 105, 103, 107,
	106, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	84, 85, 87, 88, 89, 86, 0, 0, 82, 83,
	96, 93, 94, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 75, 102, 104,
	97, 98, 99, 0, 90, 91, 92, 95, 0, 0,
	0, 78, 0, 0, 0, 77, 79, 304, 81, 100,
	101, 105, 103, 107, 106, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 84, 85, 87, 88, 89, 86,
	0, 0, 82, 83, 96, 93, 94, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 75, 102, 104, 97, 98, 99, 0, 90, 91,
	92, 95, 0, 0, 0, 78, 0, 0, 0, 77,
	79, 285, 81, 100, 101, 105, 103, 107, 106, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 84, 85,
	87, 88, 89, 86, 0, 0, 82, 83, 96, 93,
	94, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 75, 102, 104, 97, 98,
	99, 0, 90, 91, 92, 95, 0, 0, 0, 78,
	220, 221, 0, 77, 79, 81, 100, 101, 105, 103,
	107, 106, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 84, 85, 87, 88, 89, 86, 0, 0, 82,
	83, 96, 93, 94, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 74, 0, 75, 102,
	104, 97, 98, 99, 0, 90, 91, 92, 95, 0,
	187, 0, 78, 0, 0, 0, 77, 79, 81, 100,
	101, 105, 103, 107, 106, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 84, 85, 87, 88, 89, 86,
	0, 0, 82, 83, 96, 93, 94, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 75, 102, 104, 97, 98, 99, 0, 90, 91,
	92, 95, 0, 0, 0, 78, 386, 0, 0, 77,
	79, 81, 100, 101, 105, 103, 107, 106, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 84, 85, 87,
	88, 89, 86, 0, 0, 82, 83, 96, 93, 94,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 374, 75, 102, 104, 97, 98, 99,
	0, 90, 91, 92, 95, 0, 0, 0, 78, 0,
	0, 0, 77, 79, 81, 100, 101, 105, 103, 107,
	106, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	84, 85, 87, 88, 89, 86, 0, 0, 82, 83,
	96, 93, 94, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 75, 102, 104,
	97, 98, 99, 0, 90, 91, 92, 95, 0, 0,
	0, 78, 373, 0, 0, 77, 79, 81, 100, 101,
	105, 103, 107, 106, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 84, 85, 87, 88, 89, 86, 0,
	0, 82, 83, 96, 93, 94, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 365,
	75, 102, 104, 97, 98, 99, 0, 90, 91, 92,
	95, 0, 0, 0, 78, 0, 0, 0, 77, 79,
	81, 100, 101, 105, 103, 107, 106, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 84, 85, 87, 88,
	89, 86, 0, 0, 82, 83, 96, 93, 94, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 75, 102, 104, 97, 98, 99, 0,
	90, 91, 92, 95, 0, 362, 0, 78, 0, 0,
	0, 77, 79, 81, 100, 101, 105, 103, 107, 106,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 84,
	85, 87, 88, 89, 86, 0, 0, 82, 83, 96,
	93, 94, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 75, 102, 104, 97,
	98, 99, 0, 90, 91, 92, 95, 0, 333, 0,
	78, 0, 0, 0, 77, 79, 81, 100, 101, 105,
	103, 107, 106, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 84, 85, 87, 88, 89, 86, 0, 0,
	82, 83, 96, 93, 94, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 75,
	102, 104, 97, 98, 99, 0, 90, 91, 92, 95,
	0, 331, 0, 78, 0, 0, 0, 77, 79, 81,
	100, 101, 105, 103, 107, 106, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 84, 85, 87, 88, 89,
	86, 0, 0, 82, 83, 96, 93, 94, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 75, 102, 104, 97, 98, 99, 0, 90,
	91, 92, 95, 0, 0, 0, 78, 324, 0, 0,
	77, 79, 81, 100, 101, 105, 103, 107, 106, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 84, 85,
	87, 88, 89, 86, 0, 0, 82, 83, 96, 93,
	94, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 75, 102, 104, 97, 98,
	99, 0, 90, 91, 92, 95, 0, 0, 0, 78,
	0, 0, 296, 77, 79, 81, 100, 101, 105, 103,
	107, 106, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 84, 85, 87, 88, 89, 86, 0, 0, 82,
	83, 96, 93, 94, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 75, 102,
	104, 97, 98, 99, 0, 90, 91, 92, 95, 0,
	291, 0, 78, 0, 0, 0, 77, 79, 81, 100,
	101, 105, 103, 107, 106, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 84, 85, 87, 88, 89, 86,
	0, 0, 82, 83, 96, 93, 94, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 75, 102, 104, 97, 98, 99, 0, 90, 91,
	92, 95, 0, 287, 0, 78, 0, 0, 0, 77,
	79, 81, 100, 101, 105, 103, 107, 106, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 84, 85, 87,
	88, 89, 86, 0, 0, 82, 83, 96, 93, 94,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 75, 102, 104, 97, 98, 99,
	0, 90, 91, 92, 95, 0, 279, 0, 78, 0,
	0, 0, 77, 79, 81, 100, 101, 105, 103, 107,
	106, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	84, 85, 87, 88, 89, 86, 0, 0, 82, 83,
	96, 93, 94, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 266, 75, 102, 104,
	97, 98, 99, 0, 90, 91, 92, 95, 0, 0,
	0, 78, 0, 0, 0, 77, 79, 81, 100, 101,
	105, 103, 107, 106, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 84, 85, 87, 88, 89, 86, 0,
	0, 82, 83, 96, 93, 94, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	75, 102, 104, 97, 98, 99, 0, 90, 91, 92,
	95, 0, 0, 0, 78, 253, 0, 0, 77, 79,
	81, 100, 101, 105, 103, 107, 106, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 84, 85, 87, 88,
	89, 86, 0, 0, 82, 83, 96, 93, 94, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 75, 102, 104, 97, 98, 99, 0,
	90, 91, 92, 95, 0, 0, 0, 78, 0, 0,
	238, 77, 79, 81, 100, 101, 105, 103, 107, 106,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 84,
	85, 87, 88, 89, 86, 0, 0, 82, 83, 96,
	93, 94, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 225, 75, 102, 104, 97,
	98, 99, 0, 90, 91, 92, 95, 0, 0, 0,
	78, 0, 0, 0, 77, 79, 81, 100, 101, 105,
	103, 107, 106, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 84, 85, 87, 88, 89, 86, 0, 0,
	82, 83, 96, 93, 94, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 75,
	102, 104, 97, 98, 99, 0, 90, 91, 92, 95,
	0, 0, 0, 78, 222, 0, 0, 77, 79, 81,
	100, 101, 105, 103, 107, 106, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 84, 85, 87, 88, 89,
	86, 0, 0, 82, 83, 96, 93, 94, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 75, 102, 104, 97, 98, 99, 0, 90,
	91, 92, 95, 0, 0, 0, 78, 197, 0, 0,
	77, 79, 81, 100, 101, 105, 103, 107, 106, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 84, 85,
	87, 88, 89, 86, 0, 0, 82, 83, 96, 93,
	94, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 75, 102, 104, 97, 98,
	99, 0, 90, 91, 92, 95, 0, 191, 0, 78,
	0, 0, 0, 77, 79, 81, 100, 101, 105, 103,
	107, 106, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 84, 85, 87, 88, 89, 86, 0, 0, 82,
	83, 96, 93, 94, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 75, 102,
	104, 97, 98, 99, 0, 90, 91, 92, 95, 0,
	182, 0, 78, 34, 47, 48, 77, 79, 31, 13,
	44, 14, 26, 0, 27, 0, 0, 0, 0, 0,
	0, 0, 36, 49, 50, 51, 0, 15, 16, 0,
	0, 0, 0, 0, 0, 0, 0, 11, 12, 0,
	0, 0, 0, 0, 28, 0, 0, 17, 0, 37,
	38, 0, 35, 18, 19, 0, 0, 0, 0, 0,
	0, 0, 46, 0, 53, 55, 0, 0, 54, 0,
	39, 0, 33, 0, 0, 0, 0, 32, 0, 52,
	81, 100, 101, 105, 103, 107, 106, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 84, 85, 87, 88,
	89, 86, 0, 0, 82, 83, 96, 93, 94, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 74, 0, 75, 102, 104, 97, 98, 99, 0,
	90, 91, 92, 95, 0, 0, 0, 78, 0, 0,
	0, 77, 79, 81, 100, 101, 105, 103, 107, 106,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 84,
	85, 87, 88, 89, 86, 0, 0, 82, 83, 96,
	93, 94, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 75, 102, 104, 97,
	98, 99, 0, 90, 91, 92, 95, 0, 0, 0,
	78, 0, 0, 0, 77, 79, 81, 100, 101, 105,
	103, 107, 106, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 84, 85, 87, 88, 89, 86, 0, 0,
	82, 83, 96, 93, 94, 0, 0, 0, 0, 0,
	0, 80, 0, 0, 0, 0, 0, 0, 0, 75,
	102, 104, 97, 98, 99, 0, 90, 91, 92, 95,
	0, 0, 0, 78, 0, 0, 0, 215, 79, 81,
	100, 101, 105, 103, 107, 106, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 84, 85, 87, 88, 89,
	86, 0, 0, 82, 83, 96, 93, 94, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 75, 102, 104, 97, 98, 99, 0, 90,
	91, 92, 95, 0, 0, 0, 78, 0, 0, 0,
	214, 79, 81, 100, 101, 105, 103, 107, 106, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 84, 85,
	87, 88, 89, 86, 0, 0, 82, 83, 96, 93,
	94, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 75, 102, 104, 97, 98,
	99, 0, 90, 91, 92, 95, 0, 0, 0, 144,
	0, 0, 0, 77, 79, 81, 100, 101, 105, 103,
	107, 106, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	83, 96, 93, 94, 0, 0, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 75, 102,
	104, 97, 98, 99, 0, 90, 91, 92, 95, 0,
	0, 0, 78, 0, 0, 0, 77, 79, 81, 100,
	101, 105, 103, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 83, 96, 93, 94, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 0, 81, 100, 101,
	105, 103, 102, 104, 97, 98, 99, 0, 90, 91,
	92, 95, 0, 0, 0, 78, 0, 0, 0, 77,
	79, 82, 83, 96, 93, 94, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 104, 97, 98, 99, 0, 90, 91, 92,
	95, 0, 0, 0, 78, 114, 47, 48, 77, 79,
	31, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 49, 50, 51, 0, 0,
	0, 0, 0, 0, 0, 0, 34, 47, 48, 0,
	0, 31, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 38, 0, 35, 36, 49, 50, 51, 0,
	0, 0, 0, 0, 46, 0, 53, 55, 0, 0,
	54, 0, 109, 0, 33, 0, 0, 112, 0, 32,
	0, 52, 37, 38, 0, 35, 0, 34, 47, 48,
	0, 0, 31, 0, 0, 46, 0, 53, 55, 0,
	0, 54, 0, 39, 0, 33, 36, 49, 50, 51,
	32, 303, 52, 0, 0, 0, 0, 0, 34, 47,
	48, 0, 0, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 38, 0, 35, 36, 49, 50,
	51, 0, 0, 0, 0, 0, 46, 0, 53, 55,
	0, 0, 54, 0, 39, 0, 33, 0, 0, 0,
	0, 32, 284, 52, 37, 38, 0, 35, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 53,
	55, 0, 0, 54, 0, 39, 0, 33, 0, 0,
	239, 0, 32, 0, 52, 34, 47, 48, 0, 0,
	31, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 36, 49, 50, 51, 0, 0,
	0, 0, 0, 0, 0, 0, 34, 47, 48, 0,
	0, 31, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 38, 0, 35, 36, 49, 50, 51, 193,
	0, 0, 0, 0, 46, 0, 53, 55, 0, 0,
	54, 0, 39, 0, 33, 0, 0, 0, 0, 32,
	0, 52, 37, 38, 0, 35, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 46, 0, 53, 55, 0,
	0, 54, 0, 39, 0, 33, 0, 0, 188, 0,
	32, 0, 52, 34, 47, 48, 0, 0, 31, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 49, 50, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 34, 47, 48, 0, 0, 31,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 37,
	38, 0, 35, 36, 49, 50, 51, 155, 0, 0,
	0, 0, 46, 0, 53, 55, 0, 0, 54, 0,
	39, 0, 33, 0, 0, 0, 0, 32, 0, 52,
	37, 38, 0, 35, 0, 34, 47, 48, 0, 0,
	31, 0, 0, 46, 0, 53, 55, 0, 0, 54,
	0, 39, 0, 33, 36, 49, 50, 51, 32, 0,
	52, 0, 0, 0, 0, 0, 34, 47, 48, 0,
	0, 31, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 37, 38, 0, 35, 36, 49, 50, 51, 0,
	0, 0, 0, 0, 46, 0, 53, 55, 0, 0,
	54, 0, 334, 0, 33, 0, 0, 0, 0, 32,
	0, 52, 37, 38, 0, 35, 0, 34, 47, 48,
	0, 0, 31, 0, 0, 46, 0, 53, 55, 0,
	0, 54, 0, 294, 0, 33, 36, 49, 50, 51,
	32, 0, 52, 0, 0, 0, 0, 0, 34, 47,
	48, 0, 0, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 37, 38, 0, 35, 36, 49, 50,
	51, 0, 0, 0, 0, 0, 46, 0, 53, 55,
	0, 0, 54, 0, 292, 0, 33, 0, 0, 0,
	0, 32, 0, 52, 37, 38, 0, 35, 0, 34,
	132, 48, 0, 0, 31, 0, 0, 46, 0, 53,
	55, 0, 0, 54, 0, 236, 0, 33, 36, 49,
	50, 51, 32, 0, 52, 0, 0, 0, 0, 0,
	69, 47, 48, 0, 0, 31, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 37, 38, 0, 35, 36,
	49, 50, 51, 0, 0, 0, 0, 0, 46, 0,
	53, 55, 0, 0, 54, 0, 39, 0, 33, 0,
	0, 0, 0, 32, 0, 52, 37, 38, 0, 35,
	0, 0, 0, 81, 0, 0, 0, 0, 0, 46,
	0, 53, 55, 0, 0, 54, 0, 39, 0, 33,
	0, 0, 0, 0, 32, 0, 52, 82, 83, 96,
	93, 94, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	98, 99, 0, 90, 91, 92, 95, 0, 0, 0,
	78, 0, 0, 0, 77, 79,
}
var yyPact = [...]int{

	-60, -1000, 2259, -60, -1000, -73, -73, -1000, -1000, -1000,
	-1000, -1000, -1000, 3140, 3140, 254, 164, 3386, 94, 93,
	235, -1000, -1000, 2324, -1000, -1000, 3140, 2811, 3140, -54,
	-1000, 147, -73, 3140, 86, 92, 91, 90, 3140, -73,
	-1000, -1000, -1000, -1000, 252, 74, 3355, -1000, -1000, -1000,
	-1000, -1000, 3140, 3140, 3140, 3140, -1000, -1000, -1000, -1000,
	-1000, 2259, -73, -1000, -15, 2387, 2387, 163, -60, 89,
	2576, 3140, 3140, 206, 3140, 3140, 3140, 253, 3140, 3109,
	3140, 3140, -1000, -1000, 3140, 3140, 3140, 3140, 3140, 3140,
	3140, 3140, 3140, 3140, 3140, 3140, 3140, 3140, 3140, 3140,
	3140, 3140, 3140, 3140, 3140, 3140, 3140, 3140, 2189, -60,
	105, 929, 3032, -53, 86, 2126, 3001, 252, 79, 3140,
	-73, 2063, 3140, 3140, 80, 66, 2387, 3140, -6, -1000,
	3140, -73, -1000, -14, -14, -14, -54, 2513, -54, 2450,
	-1000, -60, 144, 3140, 3140, 866, 2000, 3140, -60, 2387,
	1937, 2639, -1000, 135, 483, 3140, 2387, 1, 2387, 2387,
	2387, 2387, 2387, 2387, 1, 1, 1, 1, 1, 1,
	1, 293, 293, 293, 3427, 3427, 3427, 3427, 3427, 3427,
	2741, 2702, -60, 143, -73, 3140, -73, -60, 3304, 1874,
	2924, -73, 419, 3140, 108, 252, -55, -1000, 102, 1811,
	-16, -1000, 80, 80, -32, 80, -47, -39, 251, -56,
	1748, 3140, -15, 3140, 250, 248, 141, 207, 63, 60,
	-1000, 3140, -1000, 1685, 140, 3140, 71, -1000, -1000, 2893,
	802, 139, -1000, 1622, 247, 134, -60, 1559, 3273, 3222,
	1496, 201, -1000, 2842, 738, 161, 67, 37, -73, -57,
	-73, 65, -1000, -1000, -1000, 246, -28, -28, 80, -28,
	-38, -1000, 3140, 8, 131, -73, 3140, -15, 2387, -54,
	-1000, -1000, -1000, 197, 59, -1000, 52, -1000, 1433, -60,
	-1000, 2639, -1000, 674, -1000, -1000, -1000, -60, -1000, -1000,
	128, -60, -60, 1370, -60, 1307, 3191, -33, -1000, -1000,
	178, 3140, 610, -1000, -1000, -60, 160, 158, 51, -73,
	-1000, -1000, -1000, -46, -1000, 547, 3140, -1000, 3140, 2387,
	157, -60, -1000, -1000, -1000, 126, -1000, 124, -1000, 123,
	121, -60, 118, -60, -60, 1244, 116, -1000, -1000, -60,
	1181, 82, -1000, 113, -60, -60, 156, 80, -1000, 3140,
	1118, 1055, -60, 112, -1000, -1000, -1000, -1000, 109, -1000,
	107, 106, -60, -1000, -1000, -60, -60, -1000, 101, 100,
	-60, -28, 992, -1000, 3140, 99, 212, -1000, -1000, -1000,
	98, -1000, -1000, -1000, -1000, 97, -1000, 2387, 210, 152,
	-1000, -1000, 150, -60, -60, 96, 83, -1000, -1000,
}
var yyPgo = [...]int{

	0, 50, 290, 218, 245, 289, 288, 286, 285, 284,
	283, 6, 5, 30, 0, 12, 1, 4, 11, 282,
	281, 279, 278, 275, 272, 271, 269, 264, 261, 270,
	262, 10, 7, 114, 2,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 5,
	6, 6, 7, 7, 7, 8, 8, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 9, 10, 10, 10,
	10, 10, 11, 11, 12, 13, 13, 13, 13, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	15, 15, 15, 16, 16, 16, 16, 16, 16, 17,
	17, 18, 19, 19, 19, 19, 19, 19, 20, 20,
	20, 21, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 22, 22, 22, 23, 23, 23, 23, 24, 24,
	24, 24, 24, 24, 24, 24, 28, 28, 28, 28,
	28, 28, 28, 27, 27, 27, 26, 26, 26, 26,
	26, 26, 25, 25, 29, 29, 30, 30, 30, 31,
	31, 33, 33, 34, 32, 32, 32, 32,
}
var yyR2 = [...]int{

	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 13, 12, 9, 8, 6, 5, 6, 5,
	4, 6, 4, 1, 1, 1, 1, 1, 1, 4,
	3, 3, 5, 7, 5, 4, 7, 5, 6, 7,
	7, 8, 7, 8, 8, 9, 7, 0, 1, 1,
	2, 2, 4, 4, 3, 0, 1, 4, 4, 1,
	1, 5, 3, 3, 7, 8, 8, 9, 5, 3,
	5, 4, 5, 4, 4, 4, 4, 4, 4, 6,
	8, 7, 3, 2, 3, 5, 1, 1, 1, 1,
	0, 1, 4, 1, 3, 2, 2, 5, 2, 2,
	3, 1, 2, 1, 1, 1, 1, 1, 0, 3,
	6, 6, 5, 5, 6, 5, 5, 2, 2, 2,
	2, 4, 2, 4, 1, 1, 1, 1, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 2, 1, 1, 0,
	1, 1, 2, 1, 0, 2, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -29, -2, -30, 76, -33, -34, 81, -3,
	-4, 38, 39, 10, 12, 28, 29, 48, 54, 55,
	-7, -8, -9, -14, -5, -6, 13, 15, 45, -18,
	-19, 9, 78, 73, 4, 53, 23, 50, 51, 71,
	-21, -22, -23, -24, 11, -13, 63, 5, 6, 24,
	25, 26, 80, 65, 69, 66, -28, -27, -26, -25,
	-29, -30, -33, -34, -13, -14, -14, 4, 71, 4,
	-14, 73, 73, 14, 57, 59, 27, 77, 73, 78,
	51, 16, 40, 41, 32, 33, 37, 34, 35, 36,
	66, 67, 68, 43, 44, 69, 42, 62, 63, 64,
	17, 18, 60, 20, 61, 19, 22, 21, -14, 71,
	-15, -14, 76, -4, 4, -14, 78, 73, 4, -31,
	-33, -14, 73, 73, 73, 73, -14, -31, -15, 4,
	57, 75, 5, -14, -14, -14, -18, -14, -18, -14,
	-3, 71, -1, 73, 73, -14, -14, 13, 71, -14,
	-14, -14, 4, -13, -14, 58, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, 71, -1, -33, 16, 75, 71, 76, -14,
	76, 71, -14, 58, -15, 73, -13, 74, -13, -14,
	-16, 4, 66, -17, 56, 49, 78, -16, 52, -20,
	-14, 57, -13, -31, 77, 77, -1, 72, -13, -13,
	74, 75, 74, -14, -1, 58, 8, 74, 79, 58,
	-14, -1, 72, -14, -31, -1, 71, -14, 76, 76,
	-14, -31, 79, 58, -14, 74, 8, -15, 75, -32,
	-33, 8, 74, 74, 74, 77, -16, -16, 78, -16,
	79, 74, 75, 4, -32, 75, 58, -13, -14, -18,
	4, 4, 72, 30, 8, 74, 8, 74, -14, 71,
	72, -14, 74, -14, 79, 79, 72, 71, 4, 72,
	-1, 71, 71, -14, 71, -14, 76, -10, -12, -11,
	47, 46, -14, 79, 79, 71, 74, 74, 8, -33,
	79, 74, 4, -16, -17, -14, 75, 72, -31, -14,
	4, 71, 74, 74, 74, -1, 79, -1, 72, -1,
	-1, 71, -1, 71, 71, -14, -31, -11, -12, 58,
	-14, -13, 79, -1, 71, 71, 74, 79, 74, 75,
	-14, -14, 71, -1, 72, 72, 72, 72, -1, 72,
	-1, -1, 71, 72, -1, 58, 58, 72, -1, -1,
	71, -16, -14, 74, 58, -1, 72, 72, 72, 72,
	-1, -1, -1, 72, 72, -1, 74, -14, 72, 31,
	72, 72, 31, 71, 71, -1, -1, 72, 72,
}
var yyDef = [...]int{

	154, -2, -2, 154, 155, 158, 157, 161, 163, 3,
	6, 7, 8, 55, 0, 0, 0, 0, 0, 0,
	23, 24, 25, -2, 27, 28, 0, -2, 0, 59,
	60, 0, 159, 0, 101, 0, 0, 0, 0, 159,
	86, 87, 88, 89, 90, 0, 0, 103, 104, 105,
	106, 107, 0, 0, 0, 0, 124, 125, 126, 127,
	2, -2, 156, 162, 9, 56, 10, 0, 154, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 0, 128, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 154,
	0, 56, 0, 0, -2, 0, 0, 90, 0, 55,
	160, 0, 55, 0, 0, 0, 83, 108, 0, 91,
	55, 159, 102, 117, 118, 119, -2, 0, -2, 0,
	4, 154, 0, 55, 55, 0, 0, 0, 154, 30,
	0, 62, 63, 0, 0, 0, 82, 84, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 0, 157, 0, 159, 154, 0, 0,
	0, 159, 0, 0, 0, 90, 164, 69, 0, 0,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 164,
	0, 55, 31, 0, 0, 0, 0, 0, 0, 0,
	20, 0, 22, 0, 0, 0, 0, 73, 75, 0,
	0, 0, 35, 0, 0, 0, 154, 0, 0, 0,
	0, 47, 74, 0, 0, 0, 0, 0, -2, 0,
	166, 0, 71, 76, 77, 0, 95, 96, 0, 98,
	99, 78, 0, 0, 0, -2, 0, 29, 57, -2,
	-2, -2, 11, 0, 0, -2, 0, -2, 0, 154,
	34, 61, 72, 0, 115, 116, 32, 154, 92, 37,
	0, 154, 154, 0, 154, 0, 0, 159, 48, 49,
	0, 55, 0, 112, 113, 154, 0, 0, 0, -2,
	68, 70, 94, 0, 100, 0, 0, 85, 0, 109,
	0, 154, -2, -2, 21, 0, 114, 0, 38, 0,
	0, 154, 0, 154, 154, 0, 0, 50, 51, 154,
	56, 0, 111, 0, 154, 154, 0, 0, 79, 0,
	0, 0, 154, 0, 33, 36, 39, 40, 0, 42,
	0, 0, 154, 46, 54, 154, 154, 64, 0, 0,
	154, 97, 0, 81, 0, 0, 15, 41, 43, 44,
	0, 52, 53, 65, 66, 0, 80, 110, 14, 0,
	45, 67, 0, 154, 154, 0, 0, 13, 12,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	81, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 68, 69, 3,
	73, 74, 66, 62, 75, 63, 77, 67, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 58, 76,
	60, 57, 61, 59, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 78, 3, 79, 65, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 71, 64, 72,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 70,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:99
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:103
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:109
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:118
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:134
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:138
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:142
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:147
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:152
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:157
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:162
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:167
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:172
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 14:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:177
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:207
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:212
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr, Key: yyDollar[5].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:217
		{
			yyVAL.stmt = &ast.CloseStmt{Expr: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:222
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:226
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:230
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:234
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:241
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:251
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:258
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{yyDollar[3].expr}}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:263
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
			}
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:277
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:282
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			ifStmt.ElseIf = append(ifStmt.ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:287
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			if ifStmt.Else != nil {
				yylex.Error("multiple else statement")
			}
			ifStmt.Else = yyDollar[4].compstmt
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:297
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:302
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:313
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:318
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:323
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:328
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:333
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:338
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:343
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:348
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:353
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:360
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:373
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:377
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:381
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:387
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:397
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:402
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:409
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:416
		{
			yyVAL.exprs = nil
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:420
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:424
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:431
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:440
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:444
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:448
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:453
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:458
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 64:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:463
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:468
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:473
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:478
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 68:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:483
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:488
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:493
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:498
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 72:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:503
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:508
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:513
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:518
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:523
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:528
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:538
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:543
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:548
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 81:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:553
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:558
		{
			yyVAL.expr = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:563
		{
			yyVAL.expr = &ast.ChanExpr{RHS: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:568
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:573
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:578
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:587
		{
			yyVAL.expr_idents = []string{}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:591
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:595
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:604
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:608
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("blah1")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:617
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:626
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:636
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:640
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:652
		{
			yyVAL.slice_count = 1
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:656
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:662
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:669
		{
			num, err := toNumber("-" + yyDollar[2].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: -" + yyDollar[2].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[2].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:678
		{
			num, err := toNumber(yyDollar[1].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: " + yyDollar[1].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:687
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: stringToValue(yyDollar[1].tok.Lit)}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:692
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: trueValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:697
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: falseValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:702
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: nilValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:709
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:713
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:717
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 111:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:727
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:731
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:735
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:739
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:743
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:747
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:753
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:758
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:763
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:768
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:773
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:778
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:783
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:790
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:795
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:800
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:805
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:812
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:820
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:828
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:836
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:844
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:852
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:860
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:868
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:879
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:884
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:889
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:894
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:899
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:904
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:909
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "**", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:916
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:921
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:926
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:933
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:938
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:943
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:948
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:953
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:958
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:965
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:970
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
