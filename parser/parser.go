// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/mattn/anko/ast"
)

//line parser.go.y:44
type yySymType struct {
	yys int
	tok ast.Token

	compstmt            ast.Stmt
	stmts               ast.Stmt
	stmt                ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default ast.Stmt

	exprs                []ast.Expr
	expr                 ast.Expr
	expr_idents          []string
	type_data            *ast.TypeStruct
	slice_count          int
	expr_member_or_ident ast.Expr
	expr_member          *ast.MemberExpr
	expr_ident           *ast.IdentExpr
	expr_literals        ast.Expr
	expr_map             *ast.MapExpr
	expr_slice           ast.Expr
	expr_chan            ast.Expr
	expr_unary           ast.Expr
	expr_binary          ast.Expr
	expr_lets            ast.Expr

	op_binary     ast.Operator
	op_comparison ast.Operator
	op_add        ast.Operator
	op_multiply   ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const SHIFTLEFT = 57384
const SHIFTRIGHT = 57385
const SWITCH = 57386
const CASE = 57387
const DEFAULT = 57388
const GO = 57389
const CHAN = 57390
const MAKE = 57391
const OPCHAN = 57392
const EQOPCHAN = 57393
const TYPE = 57394
const LEN = 57395
const DELETE = 57396
const CLOSE = 57397
const MAP = 57398
const IMPORT = 57399
const UNARY = 57400

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"GO",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"EQOPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"IMPORT",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"','",
	"';'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1064

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	51, 57,
	58, 57,
	76, 57,
	77, 5,
	-2, 1,
	-1, 23,
	76, 58,
	-2, 26,
	-1, 27,
	16, 94,
	-2, 57,
	-1, 67,
	51, 57,
	58, 57,
	76, 57,
	-2, 5,
	-1, 120,
	16, 95,
	76, 95,
	-2, 108,
	-1, 124,
	4, 103,
	48, 103,
	56, 103,
	-2, 69,
	-1, 263,
	73, 177,
	79, 177,
	-2, 169,
	-1, 282,
	73, 177,
	-2, 169,
	-1, 286,
	1, 60,
	8, 60,
	45, 60,
	46, 60,
	51, 60,
	58, 60,
	59, 60,
	73, 60,
	75, 60,
	76, 60,
	77, 60,
	79, 60,
	82, 60,
	-2, 106,
	-1, 290,
	1, 17,
	45, 17,
	46, 17,
	73, 17,
	77, 17,
	82, 17,
	-2, 74,
	-1, 292,
	1, 19,
	45, 19,
	46, 19,
	73, 19,
	77, 19,
	82, 19,
	-2, 76,
	-1, 322,
	73, 175,
	79, 175,
	-2, 170,
	-1, 339,
	1, 16,
	45, 16,
	46, 16,
	73, 16,
	77, 16,
	82, 16,
	-2, 73,
	-1, 340,
	1, 18,
	45, 18,
	46, 18,
	73, 18,
	77, 18,
	82, 18,
	-2, 75,
}

const yyPrivate = 57344

const yyLast = 3844

var yyAct = [...]int{

	71, 314, 228, 23, 264, 315, 116, 142, 86, 36,
	282, 33, 317, 316, 5, 72, 8, 263, 76, 8,
	8, 124, 373, 8, 8, 212, 127, 114, 117, 121,
	212, 323, 89, 90, 217, 134, 277, 278, 84, 49,
	125, 212, 85, 136, 87, 130, 211, 325, 212, 8,
	280, 212, 149, 70, 212, 143, 1, 133, 150, 151,
	152, 153, 154, 215, 7, 141, 84, 321, 23, 276,
	85, 69, 87, 391, 212, 205, 147, 332, 160, 161,
	364, 164, 165, 166, 167, 200, 169, 171, 340, 173,
	147, 339, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 6, 291, 326, 319, 204,
	289, 68, 297, 208, 168, 269, 128, 261, 230, 207,
	135, 157, 123, 69, 320, 201, 209, 220, 222, 223,
	244, 130, 130, 229, 130, 201, 201, 232, 126, 158,
	140, 130, 130, 130, 146, 233, 213, 214, 126, 216,
	139, 145, 138, 241, 137, 210, 224, 225, 227, 78,
	132, 248, 198, 128, 226, 219, 77, 431, 131, 147,
	430, 337, 426, 292, 147, 231, 422, 290, 147, 129,
	427, 69, 270, 147, 260, 201, 421, 419, 236, 237,
	133, 251, 122, 413, 255, 425, 258, 245, 147, 252,
	412, 408, 407, 234, 259, 262, 406, 132, 404, 266,
	242, 396, 273, 392, 388, 131, 384, 130, 382, 209,
	381, 199, 380, 281, 285, 377, 129, 347, 334, 305,
	293, 302, 268, 286, 296, 295, 287, 133, 298, 338,
	162, 250, 235, 395, 249, 375, 363, 309, 311, 253,
	362, 318, 156, 126, 69, 74, 9, 358, 317, 316,
	284, 233, 424, 327, 420, 288, 10, 79, 304, 331,
	279, 267, 144, 172, 336, 73, 62, 4, 63, 2,
	335, 67, 130, 66, 64, 65, 47, 46, 45, 44,
	43, 30, 345, 50, 119, 29, 324, 333, 313, 163,
	22, 306, 21, 354, 20, 357, 25, 126, 359, 356,
	24, 355, 126, 3, 0, 0, 265, 126, 0, 365,
	69, 369, 0, 372, 155, 0, 374, 130, 0, 0,
	0, 0, 0, 0, 265, 378, 0, 0, 0, 0,
	0, 342, 366, 0, 0, 0, 0, 360, 0, 0,
	346, 0, 0, 0, 348, 349, 0, 351, 0, 397,
	199, 0, 399, 0, 0, 361, 0, 0, 0, 322,
	0, 401, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 0, 0, 0, 376, 0, 0, 322, 0,
	0, 0, 229, 418, 417, 0, 0, 383, 0, 385,
	386, 0, 0, 0, 0, 389, 0, 0, 0, 393,
	394, 0, 423, 0, 199, 0, 199, 0, 0, 126,
	0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
	265, 0, 0, 0, 409, 0, 0, 410, 411, 0,
	0, 0, 414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 199,
	0, 0, 0, 0, 86, 106, 107, 111, 109, 113,
	112, 0, 428, 0, 429, 83, 0, 0, 0, 126,
	91, 92, 94, 95, 96, 93, 0, 0, 89, 90,
	100, 101, 0, 0, 0, 0, 0, 0, 88, 81,
	0, 0, 0, 0, 0, 0, 80, 0, 82, 108,
	110, 103, 104, 105, 0, 97, 98, 99, 102, 0,
	202, 0, 84, 265, 0, 0, 85, 0, 87, 35,
	52, 53, 86, 0, 31, 13, 48, 14, 26, 0,
	27, 0, 0, 0, 0, 0, 0, 0, 39, 54,
	55, 56, 0, 15, 16, 0, 89, 90, 100, 101,
	0, 0, 0, 11, 12, 0, 0, 0, 0, 28,
	0, 0, 17, 0, 40, 57, 0, 0, 37, 18,
	19, 41, 38, 97, 98, 99, 102, 0, 0, 51,
	84, 59, 61, 0, 85, 60, 87, 42, 0, 34,
	0, 0, 0, 32, 0, 0, 58, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 370, 371, 0, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 368, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 0, 0, 0, 85, 367, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	344, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 0, 0, 0, 85,
	343, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 330, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 0, 0, 0, 85, 329, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 0, 0, 0, 85,
	300, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 272, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 0, 0, 0, 85, 271, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	247, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 0, 0, 0, 85,
	246, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 238, 239, 0, 85, 0, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 81, 0, 0, 0, 0, 0, 0, 80,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 0, 0, 0, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 416, 0, 0, 85, 0, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 0, 0, 0, 85,
	415, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 0, 0, 0, 85, 405, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	402, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 0, 0, 0, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 400, 0, 0, 85, 0, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 0, 0, 0, 85,
	398, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 390, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 0, 0, 0, 85, 0, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 387, 0, 84, 0, 0, 0, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 0, 0, 0, 85, 379, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 352, 0, 84, 0, 0, 0, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 350, 0,
	84, 0, 0, 0, 85, 0, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 341, 0, 0, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 0, 0, 312, 85, 0, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 307, 0, 84, 0, 0, 0, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 303, 0,
	84, 0, 0, 0, 85, 0, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 294, 0, 84, 0, 0, 0, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 283, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 0, 0, 0, 85, 0, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 275, 0, 0, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 274, 0, 0, 85, 0, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 0, 0, 256, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 243, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 0, 0, 0, 85, 0, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 240, 0, 0, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 218, 0, 0, 85, 0, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 206, 0, 84, 0, 0, 0, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 197, 0,
	84, 0, 0, 0, 85, 0, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 91, 92, 94, 95, 96, 93, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 0, 0, 0, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 91, 92,
	94, 95, 96, 93, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	159, 0, 0, 0, 85, 0, 87, 86, 106, 107,
	111, 109, 113, 112, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 90, 100, 101, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 108, 110, 103, 104, 105, 0, 97, 98,
	99, 102, 0, 0, 0, 84, 0, 0, 0, 85,
	0, 87, 86, 106, 107, 111, 109, 113, 112, 0,
	0, 0, 0, 83, 0, 0, 120, 52, 53, 0,
	0, 31, 0, 48, 0, 0, 89, 90, 100, 101,
	0, 0, 0, 0, 0, 39, 54, 55, 56, 0,
	0, 0, 0, 0, 0, 0, 82, 108, 110, 103,
	104, 105, 0, 97, 98, 99, 102, 0, 0, 0,
	84, 40, 57, 0, 85, 37, 87, 0, 41, 38,
	0, 0, 0, 0, 0, 0, 51, 0, 59, 61,
	0, 0, 60, 0, 115, 0, 34, 0, 0, 118,
	32, 0, 0, 58, 35, 52, 53, 0, 0, 31,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 54, 55, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 35,
	52, 53, 0, 0, 31, 0, 0, 0, 0, 40,
	57, 0, 0, 37, 0, 0, 41, 38, 39, 54,
	55, 56, 0, 0, 51, 0, 59, 61, 0, 0,
	60, 0, 42, 0, 34, 35, 52, 53, 32, 328,
	31, 58, 0, 0, 40, 57, 0, 0, 37, 0,
	0, 41, 38, 0, 39, 54, 55, 56, 0, 51,
	0, 59, 61, 0, 0, 60, 0, 42, 0, 34,
	35, 52, 53, 32, 299, 31, 58, 0, 0, 0,
	40, 57, 0, 0, 37, 0, 0, 41, 38, 39,
	54, 55, 56, 0, 0, 51, 0, 59, 61, 0,
	0, 60, 0, 42, 0, 34, 0, 0, 257, 32,
	0, 0, 58, 0, 0, 40, 57, 0, 0, 37,
	0, 0, 41, 38, 0, 221, 0, 0, 0, 0,
	51, 0, 59, 61, 0, 0, 60, 0, 42, 0,
	34, 35, 52, 53, 32, 0, 31, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	39, 54, 55, 56, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 35, 52, 53, 0,
	0, 31, 0, 0, 0, 0, 40, 57, 0, 0,
	37, 0, 0, 41, 38, 39, 54, 55, 56, 0,
	0, 51, 0, 59, 61, 0, 0, 60, 0, 42,
	0, 34, 0, 0, 203, 32, 0, 0, 58, 0,
	0, 40, 57, 0, 0, 37, 0, 0, 41, 38,
	0, 170, 0, 0, 0, 0, 51, 0, 59, 61,
	0, 0, 60, 0, 42, 0, 34, 35, 52, 53,
	32, 0, 31, 58, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 54, 55, 56,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 35, 52, 53, 0, 0, 31, 0, 0,
	0, 0, 40, 57, 0, 0, 37, 0, 0, 41,
	38, 39, 54, 55, 56, 0, 0, 51, 0, 59,
	61, 0, 0, 60, 0, 42, 0, 34, 35, 52,
	53, 32, 0, 31, 58, 0, 0, 40, 57, 0,
	0, 37, 0, 0, 41, 38, 0, 39, 54, 55,
	56, 0, 51, 0, 59, 61, 0, 0, 60, 0,
	353, 0, 34, 35, 52, 53, 32, 0, 31, 58,
	0, 0, 0, 40, 57, 0, 0, 37, 0, 0,
	41, 38, 39, 54, 55, 56, 0, 0, 51, 0,
	59, 61, 0, 0, 60, 0, 310, 0, 34, 35,
	52, 53, 32, 0, 31, 58, 0, 0, 40, 57,
	0, 0, 37, 0, 0, 41, 38, 0, 39, 54,
	55, 56, 0, 51, 0, 59, 61, 0, 0, 60,
	0, 308, 0, 34, 0, 0, 0, 32, 0, 0,
	58, 0, 0, 0, 40, 57, 0, 0, 37, 0,
	0, 41, 38, 0, 86, 106, 107, 111, 109, 51,
	112, 59, 61, 0, 0, 60, 0, 254, 0, 34,
	0, 0, 0, 32, 0, 0, 58, 0, 89, 90,
	100, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	110, 103, 104, 105, 0, 97, 98, 99, 102, 35,
	148, 53, 84, 0, 31, 0, 85, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 54,
	55, 56, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 52, 53, 0, 0, 31,
	0, 0, 0, 0, 40, 57, 0, 0, 37, 0,
	0, 41, 38, 39, 54, 55, 56, 0, 0, 51,
	0, 59, 61, 0, 0, 60, 0, 42, 0, 34,
	0, 0, 0, 32, 0, 0, 58, 0, 0, 40,
	57, 0, 0, 37, 0, 0, 41, 38, 86, 106,
	107, 111, 109, 0, 51, 0, 59, 61, 0, 0,
	60, 0, 42, 0, 34, 0, 0, 0, 32, 0,
	0, 58, 89, 90, 100, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 108, 110, 103, 104, 105, 0, 97,
	98, 99, 102, 0, 0, 0, 84, 0, 0, 0,
	85, 0, 87, 89, 90, 100, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 103, 104, 105, 0,
	97, 98, 99, 102, 0, 0, 0, 84, 0, 0,
	0, 85, 0, 87,
}
var yyPact = [...]int{

	-63, -1000, 535, -63, -1000, -62, -62, -1000, -1000, -1000,
	-1000, -1000, -1000, 3393, 3393, 281, 193, 3680, 102, 95,
	263, -1000, -1000, 1121, -1000, -1000, 3393, 3032, 3393, -1000,
	-1000, 128, -58, 169, 3393, 56, -35, 90, 88, 86,
	76, -13, -62, -1000, -1000, -1000, -1000, -1000, 278, 103,
	-1000, 3645, -1000, -1000, -1000, -1000, -1000, 3393, 3393, 3393,
	3393, 3393, -1000, -1000, -1000, -1000, -1000, 535, -62, -1000,
	0, 2811, 2811, 190, -63, 75, 2876, 3393, 3393, 237,
	3393, 3393, 3393, 3393, 3393, 3322, 3393, 279, 3393, -1000,
	-1000, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
	3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393, 3393,
	3393, 3393, 3393, 3393, 2746, -63, 69, 458, 3287, -2,
	56, 2681, 278, 49, -21, 3393, -62, -26, -1000, 169,
	169, -15, 169, -45, 2616, 3393, 3216, 3393, 3393, 169,
	122, 169, 3393, 70, -1000, 3393, 3393, -62, -1000, -36,
	2941, -36, -36, -36, -36, -1000, -63, 179, 3393, 3393,
	1056, 2551, 3393, -63, 2811, 2811, 2486, 3006, 132, 991,
	3393, -8, -1000, 2941, 2811, 2811, 2811, 2811, 2811, 2811,
	-8, -8, -8, -8, -8, -8, 526, 526, 526, 3763,
	3763, 3763, 3763, 3763, 3763, 3722, 3578, -63, 178, -62,
	3393, -62, -63, 3535, 2421, 3181, -62, 119, 278, -1000,
	-59, -62, 277, -55, -55, 169, -55, -21, -1000, 117,
	926, 3393, 2356, 2291, -6, -39, 276, -29, -66, 2226,
	3393, 0, 2811, 3393, 173, 245, 112, 108, -1000, 3393,
	-1000, 2161, 172, 3393, 47, -1000, -1000, 3145, 861, 168,
	-1000, 2096, 274, 166, -63, 2031, 3499, 3464, 1966, 223,
	189, 43, 59, -62, -48, -62, 3393, -1000, -32, 42,
	-1000, -1000, 3110, 796, -1000, -1000, -1000, -1000, 3393, 1,
	169, 165, -62, 3393, 0, 2811, -35, -1000, 177, 16,
	-1000, 13, -1000, 1901, -63, -1000, 2941, -1000, 731, -1000,
	-1000, 3393, -1000, -63, -1000, -1000, 164, -63, -63, 1836,
	-63, 1771, 3428, -33, -1000, -1000, 208, 3393, -63, 188,
	184, 5, -62, -1000, -59, 169, -1000, 666, -1000, -1000,
	3393, 601, 3393, -50, -1000, 3393, 2811, 183, -63, -1000,
	-1000, -1000, 162, -1000, 3393, 1706, 159, -1000, 157, 155,
	-63, 153, -63, -63, 1641, 151, -1000, -1000, -63, 1576,
	14, 150, -63, -63, 181, 148, -55, -1000, 3393, 1511,
	-1000, 3393, 1446, -62, 1381, -63, 145, -1000, 1316, -1000,
	-1000, -1000, -1000, 143, -1000, 139, 138, -63, -1000, -1000,
	-63, -63, -1000, 137, 130, -63, -1000, 1251, -1000, 1186,
	-1000, 3393, 3393, 124, 243, -1000, -1000, -1000, -1000, 123,
	-1000, -1000, -1000, -1000, 113, -1000, -1000, -66, 2811, 241,
	133, -1000, -1000, 109, 118, -63, -1000, -63, 107, 104,
	-1000, -1000,
}
var yyPgo = [...]int{

	0, 56, 323, 266, 276, 320, 316, 314, 312, 310,
	308, 5, 1, 39, 0, 6, 26, 11, 305, 303,
	9, 301, 2, 300, 299, 298, 297, 296, 295, 294,
	288, 286, 289, 287, 7, 4, 115, 64,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 5,
	6, 6, 6, 6, 7, 7, 7, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 9, 10,
	10, 10, 10, 10, 11, 11, 12, 13, 13, 13,
	13, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 15, 15, 15, 16, 16, 16,
	16, 16, 16, 17, 17, 18, 18, 19, 20, 21,
	21, 21, 21, 21, 21, 22, 22, 22, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 24, 24,
	25, 25, 25, 25, 25, 26, 26, 26, 26, 27,
	27, 27, 27, 27, 27, 27, 27, 31, 31, 31,
	31, 31, 31, 30, 30, 30, 29, 29, 29, 29,
	29, 29, 28, 28, 32, 32, 33, 33, 33, 34,
	34, 36, 36, 37, 35, 35, 35, 35,
}
var yyR2 = [...]int{

	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 13, 12, 9, 8, 6, 5, 6, 5,
	4, 6, 4, 1, 1, 1, 1, 1, 1, 4,
	3, 3, 3, 3, 5, 7, 5, 4, 7, 5,
	6, 7, 7, 8, 7, 8, 8, 9, 7, 0,
	1, 1, 2, 2, 4, 4, 3, 0, 1, 4,
	4, 1, 1, 5, 3, 7, 8, 8, 9, 2,
	5, 7, 3, 5, 4, 5, 4, 4, 4, 4,
	4, 4, 4, 6, 8, 7, 3, 10, 5, 1,
	1, 1, 1, 1, 0, 1, 4, 1, 3, 2,
	2, 5, 2, 2, 3, 1, 1, 3, 1, 2,
	1, 1, 1, 1, 1, 0, 3, 6, 6, 5,
	5, 7, 8, 6, 5, 5, 7, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 2, 1, 1, 0,
	1, 1, 2, 1, 0, 2, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -32, -2, -33, 77, -36, -37, 82, -3,
	-4, 38, 39, 10, 12, 28, 29, 47, 54, 55,
	-7, -8, -9, -14, -5, -6, 13, 15, 44, -18,
	-21, 9, 78, -17, 74, 4, -20, 53, 57, 23,
	49, 56, 72, -23, -24, -25, -26, -27, 11, -13,
	-19, 64, 5, 6, 24, 25, 26, 50, 81, 66,
	70, 67, -31, -30, -29, -28, -32, -33, -36, -37,
	-13, -14, -14, 4, 72, 4, -14, 74, 74, 14,
	58, 51, 60, 27, 74, 78, 16, 80, 50, 40,
	41, 32, 33, 37, 34, 35, 36, 67, 68, 69,
	42, 43, 70, 63, 64, 65, 17, 18, 61, 20,
	62, 19, 22, 21, -14, 72, -15, -14, 77, -4,
	4, -14, 74, 4, 79, -34, -36, -16, 4, 67,
	-17, 56, 48, 78, -14, 74, 78, 74, 74, 74,
	74, 78, -34, -15, 4, 58, 51, 76, 5, -14,
	-14, -14, -14, -14, -14, -3, 72, -1, 74, 74,
	-14, -14, 13, 72, -14, -14, -14, -14, -13, -14,
	59, -14, 4, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, 72, -1, -36,
	16, 76, 72, 77, -14, 77, 72, -15, 74, -17,
	-13, 72, 80, -16, -16, 78, -16, 79, 75, -13,
	-14, 59, -14, -14, -16, -16, 52, -16, -22, -14,
	58, -13, -14, -34, -1, 73, -13, -13, 75, 76,
	75, -14, -1, 59, 8, 75, 79, 59, -14, -1,
	73, -14, -34, -1, 72, -14, 77, 77, -14, -34,
	75, 8, -15, 76, -35, -36, -34, 4, -16, 8,
	75, 79, 59, -14, 75, 75, 75, 75, 76, 4,
	79, -35, 76, 59, -13, -14, -20, 73, 30, 8,
	75, 8, 75, -14, 72, 73, -14, 75, -14, 79,
	79, 59, 73, 72, 4, 73, -1, 72, 72, -14,
	72, -14, 77, -10, -12, -11, 46, 45, 72, 75,
	75, 8, -36, 79, -13, 79, 75, -14, 79, 79,
	59, -14, 76, -16, 73, -34, -14, 4, 72, 75,
	75, 75, -1, 79, 59, -14, -1, 73, -1, -1,
	72, -1, 72, 72, -14, -34, -11, -12, 59, -14,
	-13, -1, 72, 72, 75, -35, -16, 79, 59, -14,
	75, 76, -14, 72, -14, 72, -1, 73, -14, 79,
	73, 73, 73, -1, 73, -1, -1, 72, 73, -1,
	59, 59, 73, -1, -1, 72, 73, -14, 79, -14,
	75, -34, 59, -1, 73, 79, 73, 73, 73, -1,
	-1, -1, 73, 73, -1, 79, 75, -22, -14, 73,
	31, 73, 73, -35, 31, 72, 73, 72, -1, -1,
	73, 73,
}
var yyDef = [...]int{

	164, -2, -2, 164, 165, 168, 167, 171, 173, 3,
	6, 7, 8, 57, 0, 0, 0, 0, 0, 0,
	23, 24, 25, -2, 27, 28, 0, -2, 0, 61,
	62, 0, 169, 0, 0, 108, 106, 0, 0, 0,
	0, 0, 169, 89, 90, 91, 92, 93, 94, 0,
	105, 0, 110, 111, 112, 113, 114, 0, 0, 0,
	0, 0, 135, 136, 137, 138, 2, -2, 166, 172,
	9, 58, 10, 0, 164, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 0, 0, 139,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 164, 0, 58, 0, 0,
	-2, 0, 94, 0, -2, 57, 170, 0, 97, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 0, 0,
	0, 0, 115, 0, 95, 57, 0, 169, 109, 130,
	129, 131, 132, 133, 134, 4, 164, 0, 57, 57,
	0, 0, 0, 164, 30, 32, 0, 64, 0, 0,
	0, 86, 107, 128, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 0, 167,
	0, 169, 164, 0, 0, 0, 169, 0, 94, 104,
	174, 169, 0, 99, 100, 0, 102, 103, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 174, 0,
	57, 31, 33, 0, 0, 0, 0, 0, 20, 0,
	22, 0, 0, 0, 0, 76, 78, 0, 0, 0,
	37, 0, 0, 0, 164, 0, 0, 0, 0, 49,
	0, 0, 0, -2, 0, 176, 57, 98, 0, 0,
	74, 77, 0, 0, 79, 80, 81, 82, 0, 0,
	0, 0, -2, 0, 29, 59, -2, 11, 0, 0,
	-2, 0, -2, 0, 164, 36, 63, 75, 0, 124,
	125, 0, 34, 164, 96, 39, 0, 164, 164, 0,
	164, 0, 0, 169, 50, 51, 0, 57, 164, 0,
	0, 0, -2, 70, 174, 0, 73, 0, 119, 120,
	0, 0, 0, 0, 88, 0, 116, 0, 164, -2,
	-2, 21, 0, 123, 0, 0, 0, 40, 0, 0,
	164, 0, 164, 164, 0, 0, 52, 53, 164, 58,
	0, 0, 164, 164, 0, 0, 101, 118, 0, 0,
	83, 0, 0, 169, 0, 164, 0, 35, 0, 126,
	38, 41, 42, 0, 44, 0, 0, 164, 48, 56,
	164, 164, 65, 0, 0, 164, 71, 0, 121, 0,
	85, 115, 0, 0, 15, 127, 43, 45, 46, 0,
	54, 55, 66, 67, 0, 122, 84, 174, 117, 14,
	0, 47, 68, 0, 0, 164, 87, 164, 0, 0,
	13, 12,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	82, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 69, 70, 3,
	74, 75, 67, 63, 76, 64, 80, 68, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 59, 77,
	61, 58, 62, 60, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 78, 3, 79, 66, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 65, 73,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 71,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:106
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:110
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:116
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:125
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:141
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:145
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:149
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:154
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:159
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:169
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:174
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:179
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 14:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:184
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:189
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:199
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:204
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:209
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:214
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:219
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr, Key: yyDollar[5].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:224
		{
			yyVAL.stmt = &ast.CloseStmt{Expr: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:229
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:233
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:237
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:241
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:248
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:252
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:258
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:265
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{yyDollar[3].expr}}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:270
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
			}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:282
		{
			yyVAL.stmt_lets = &ast.ChanStmt{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:287
		{
			if len(yyDollar[1].exprs) == 2 {
				chanStmt := &ast.ChanStmt{LHS: yyDollar[1].exprs[0].(ast.Expr), OkExpr: yyDollar[1].exprs[1].(ast.Expr), RHS: yyDollar[3].expr}
				yyVAL.stmt_lets = chanStmt
				yyVAL.stmt_lets.SetPosition(chanStmt.LHS.Position())
			} else if len(yyDollar[1].exprs) < 2 {
				yylex.Error("missing expressions on left side of channel operator")
				yyVAL.stmt_lets = &ast.ChanStmt{RHS: yyDollar[3].expr}
				yyVAL.stmt_lets.SetPosition(yyDollar[2].tok.Position())
			}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:301
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:306
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			ifStmt.ElseIf = append(ifStmt.ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:311
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			if ifStmt.Else != nil {
				yylex.Error("multiple else statement")
			}
			ifStmt.Else = yyDollar[4].compstmt
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:321
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:326
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:337
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:342
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:347
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:352
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:357
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:362
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:367
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:372
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:377
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:384
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:393
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:397
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:401
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:405
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:411
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:421
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:426
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:433
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:440
		{
			yyVAL.exprs = nil
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:444
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:448
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:455
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:464
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:468
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:472
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:477
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 65:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:482
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:487
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:492
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:497
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:502
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:507
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:512
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:517
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:522
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:527
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:532
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:537
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:542
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:547
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:552
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:557
		{
			yyVAL.expr = &ast.ImportExpr{Name: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:562
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:572
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:577
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:582
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:587
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:592
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 87:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:597
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:603
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:608
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:613
		{
			yyVAL.expr = yyDollar[1].expr_chan
			yyVAL.expr.SetPosition(yyDollar[1].expr_chan.Position())
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:622
		{
			yyVAL.expr_idents = []string{}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:626
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:630
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:639
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:643
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:652
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:661
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:671
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:675
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:687
		{
			yyVAL.slice_count = 1
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:691
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:697
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_member
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:701
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:707
		{
			yyVAL.expr_member = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member.SetPosition(yyDollar[1].expr.Position())
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:714
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:721
		{
			num, err := toNumber("-" + yyDollar[2].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: -" + yyDollar[2].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[2].tok.Position())
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:730
		{
			num, err := toNumber(yyDollar[1].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: " + yyDollar[1].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:739
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: stringToValue(yyDollar[1].tok.Lit)}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:744
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: trueValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:749
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: falseValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:754
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: nilValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:761
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:765
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:769
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:779
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 119:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:783
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 120:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:787
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 121:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:791
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 122:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:795
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:799
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 124:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:803
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:807
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 126:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:811
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 127:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:815
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:821
		{
			yyVAL.expr_chan = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:825
		{
			yyVAL.expr_chan = &ast.ChanExpr{RHS: yyDollar[2].expr}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:831
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:836
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:841
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:846
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:851
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:858
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:863
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:868
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:873
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:880
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:888
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:896
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:904
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:912
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:920
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:928
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:936
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:947
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:952
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:957
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:962
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:967
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:972
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:979
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:984
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:989
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:996
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1001
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1006
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1011
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1016
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1021
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1028
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1033
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
